!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";function n(e,t){t=t||te;var n=t.createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}function i(e){var t=!!e&&"length"in e&&e.length,n=he.type(e);return"function"!==n&&!he.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function o(e,t,n){return he.isFunction(t)?he.grep(e,function(e,i){return!!t.call(e,i,e)!==n}):t.nodeType?he.grep(e,function(e){return e===t!==n}):"string"!=typeof t?he.grep(e,function(e){return se.call(t,e)>-1!==n}):Te.test(t)?he.filter(t,e,n):(t=he.filter(t,e),he.grep(e,function(e){return se.call(t,e)>-1!==n&&1===e.nodeType}))}function r(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function s(e){var t={};return he.each(e.match(De)||[],function(e,n){t[n]=!0}),t}function a(e){return e}function l(e){throw e}function c(e,t,n){var i;try{e&&he.isFunction(i=e.promise)?i.call(e).done(t).fail(n):e&&he.isFunction(i=e.then)?i.call(e,t,n):t.call(void 0,e)}catch(e){n.call(void 0,e)}}function u(){te.removeEventListener("DOMContentLoaded",u),e.removeEventListener("load",u),he.ready()}function d(){this.expando=he.expando+d.uid++}function f(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Fe.test(e)?JSON.parse(e):e)}function p(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(He,"-$&").toLowerCase(),n=e.getAttribute(i),"string"==typeof n){try{n=f(n)}catch(e){}qe.set(e,t,n)}else n=void 0;return n}function h(e,t,n,i){var o,r=1,s=20,a=i?function(){return i.cur()}:function(){return he.css(e,t,"")},l=a(),c=n&&n[3]||(he.cssNumber[t]?"":"px"),u=(he.cssNumber[t]||"px"!==c&&+l)&&Re.exec(he.css(e,t));if(u&&u[3]!==c){c=c||u[3],n=n||[],u=+l||1;do r=r||".5",u/=r,he.style(e,t,u+c);while(r!==(r=a()/l)&&1!==r&&--s)}return n&&(u=+u||+l||0,o=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=o)),o}function g(e){var t,n=e.ownerDocument,i=e.nodeName,o=Xe[i];return o?o:(t=n.body.appendChild(n.createElement(i)),o=he.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),Xe[i]=o,o)}function v(e,t){for(var n,i,o=[],r=0,s=e.length;r<s;r++)i=e[r],i.style&&(n=i.style.display,t?("none"===n&&(o[r]=Ne.get(i,"display")||null,o[r]||(i.style.display="")),""===i.style.display&&ze(i)&&(o[r]=g(i))):"none"!==n&&(o[r]="none",Ne.set(i,"display",n)));for(r=0;r<s;r++)null!=o[r]&&(e[r].style.display=o[r]);return e}function m(e,t){var n;return n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&he.nodeName(e,t)?he.merge([e],n):n}function y(e,t){for(var n=0,i=e.length;n<i;n++)Ne.set(e[n],"globalEval",!t||Ne.get(t[n],"globalEval"))}function b(e,t,n,i,o){for(var r,s,a,l,c,u,d=t.createDocumentFragment(),f=[],p=0,h=e.length;p<h;p++)if(r=e[p],r||0===r)if("object"===he.type(r))he.merge(f,r.nodeType?[r]:r);else if(Ge.test(r)){for(s=s||d.appendChild(t.createElement("div")),a=(_e.exec(r)||["",""])[1].toLowerCase(),l=Ve[a]||Ve._default,s.innerHTML=l[1]+he.htmlPrefilter(r)+l[2],u=l[0];u--;)s=s.lastChild;he.merge(f,s.childNodes),s=d.firstChild,s.textContent=""}else f.push(t.createTextNode(r));for(d.textContent="",p=0;r=f[p++];)if(i&&he.inArray(r,i)>-1)o&&o.push(r);else if(c=he.contains(r.ownerDocument,r),s=m(d.appendChild(r),"script"),c&&y(s),n)for(u=0;r=s[u++];)Ue.test(r.type||"")&&n.push(r);return d}function x(){return!0}function w(){return!1}function S(){try{return te.activeElement}catch(e){}}function C(e,t,n,i,o,r){var s,a;if("object"==typeof t){"string"!=typeof n&&(i=i||n,n=void 0);for(a in t)C(e,a,n,i,t[a],r);return e}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),o===!1)o=w;else if(!o)return e;return 1===r&&(s=o,o=function(e){return he().off(e),s.apply(this,arguments)},o.guid=s.guid||(s.guid=he.guid++)),e.each(function(){he.event.add(this,t,o,i,n)})}function T(e,t){return he.nodeName(e,"table")&&he.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e:e}function P(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function $(e){var t=it.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function k(e,t){var n,i,o,r,s,a,l,c;if(1===t.nodeType){if(Ne.hasData(e)&&(r=Ne.access(e),s=Ne.set(t,r),c=r.events)){delete s.handle,s.events={};for(o in c)for(n=0,i=c[o].length;n<i;n++)he.event.add(t,o,c[o][n])}qe.hasData(e)&&(a=qe.access(e),l=he.extend({},a),qe.set(t,l))}}function E(e,t){var n=t.nodeName.toLowerCase();"input"===n&&Ye.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function A(e,t,i,o){t=oe.apply([],t);var r,s,a,l,c,u,d=0,f=e.length,p=f-1,h=t[0],g=he.isFunction(h);if(g||f>1&&"string"==typeof h&&!fe.checkClone&&nt.test(h))return e.each(function(n){var r=e.eq(n);g&&(t[0]=h.call(this,n,r.html())),A(r,t,i,o)});if(f&&(r=b(t,e[0].ownerDocument,!1,e,o),s=r.firstChild,1===r.childNodes.length&&(r=s),s||o)){for(a=he.map(m(r,"script"),P),l=a.length;d<f;d++)c=r,d!==p&&(c=he.clone(c,!0,!0),l&&he.merge(a,m(c,"script"))),i.call(e[d],c,d);if(l)for(u=a[a.length-1].ownerDocument,he.map(a,$),d=0;d<l;d++)c=a[d],Ue.test(c.type||"")&&!Ne.access(c,"globalEval")&&he.contains(u,c)&&(c.src?he._evalUrl&&he._evalUrl(c.src):n(c.textContent.replace(ot,""),u))}return e}function D(e,t,n){for(var i,o=t?he.filter(t,e):e,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||he.cleanData(m(i)),i.parentNode&&(n&&he.contains(i.ownerDocument,i)&&y(m(i,"script")),i.parentNode.removeChild(i));return e}function M(e,t,n){var i,o,r,s,a=e.style;return n=n||at(e),n&&(s=n.getPropertyValue(t)||n[t],""!==s||he.contains(e.ownerDocument,e)||(s=he.style(e,t)),!fe.pixelMarginRight()&&st.test(s)&&rt.test(t)&&(i=a.width,o=a.minWidth,r=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=o,a.maxWidth=r)),void 0!==s?s+"":s}function L(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function j(e){if(e in ft)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=dt.length;n--;)if(e=dt[n]+t,e in ft)return e}function I(e,t,n){var i=Re.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function N(e,t,n,i,o){var r,s=0;for(r=n===(i?"border":"content")?4:"width"===t?1:0;r<4;r+=2)"margin"===n&&(s+=he.css(e,n+We[r],!0,o)),i?("content"===n&&(s-=he.css(e,"padding"+We[r],!0,o)),"margin"!==n&&(s-=he.css(e,"border"+We[r]+"Width",!0,o))):(s+=he.css(e,"padding"+We[r],!0,o),"padding"!==n&&(s+=he.css(e,"border"+We[r]+"Width",!0,o)));return s}function q(e,t,n){var i,o=!0,r=at(e),s="border-box"===he.css(e,"boxSizing",!1,r);if(e.getClientRects().length&&(i=e.getBoundingClientRect()[t]),i<=0||null==i){if(i=M(e,t,r),(i<0||null==i)&&(i=e.style[t]),st.test(i))return i;o=s&&(fe.boxSizingReliable()||i===e.style[t]),i=parseFloat(i)||0}return i+N(e,t,n||(s?"border":"content"),o,r)+"px"}function F(e,t,n,i,o){return new F.prototype.init(e,t,n,i,o)}function H(){ht&&(e.requestAnimationFrame(H),he.fx.tick())}function O(){return e.setTimeout(function(){pt=void 0}),pt=he.now()}function R(e,t){var n,i=0,o={height:e};for(t=t?1:0;i<4;i+=2-t)n=We[i],o["margin"+n]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function W(e,t,n){for(var i,o=(X.tweeners[t]||[]).concat(X.tweeners["*"]),r=0,s=o.length;r<s;r++)if(i=o[r].call(n,t,e))return i}function z(e,t,n){var i,o,r,s,a,l,c,u,d="width"in t||"height"in t,f=this,p={},h=e.style,g=e.nodeType&&ze(e),m=Ne.get(e,"fxshow");n.queue||(s=he._queueHooks(e,"fx"),null==s.unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,f.always(function(){f.always(function(){s.unqueued--,he.queue(e,"fx").length||s.empty.fire()})}));for(i in t)if(o=t[i],gt.test(o)){if(delete t[i],r=r||"toggle"===o,o===(g?"hide":"show")){if("show"!==o||!m||void 0===m[i])continue;g=!0}p[i]=m&&m[i]||he.style(e,i)}if(l=!he.isEmptyObject(t),l||!he.isEmptyObject(p)){d&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],c=m&&m.display,null==c&&(c=Ne.get(e,"display")),u=he.css(e,"display"),"none"===u&&(c?u=c:(v([e],!0),c=e.style.display||c,u=he.css(e,"display"),v([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===he.css(e,"float")&&(l||(f.done(function(){h.display=c}),null==c&&(u=h.display,c="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",f.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),l=!1;for(i in p)l||(m?"hidden"in m&&(g=m.hidden):m=Ne.access(e,"fxshow",{display:c}),r&&(m.hidden=!g),g&&v([e],!0),f.done(function(){g||v([e]),Ne.remove(e,"fxshow");for(i in p)he.style(e,i,p[i])})),l=W(g?m[i]:0,i,f),i in m||(m[i]=l.start,g&&(l.end=l.start,l.start=0))}}function B(e,t){var n,i,o,r,s;for(n in e)if(i=he.camelCase(n),o=t[i],r=e[n],he.isArray(r)&&(o=r[1],r=e[n]=r[0]),n!==i&&(e[i]=r,delete e[n]),s=he.cssHooks[i],s&&"expand"in s){r=s.expand(r),delete e[i];for(n in r)n in e||(e[n]=r[n],t[n]=o)}else t[i]=o}function X(e,t,n){var i,o,r=0,s=X.prefilters.length,a=he.Deferred().always(function(){delete l.elem}),l=function(){if(o)return!1;for(var t=pt||O(),n=Math.max(0,c.startTime+c.duration-t),i=n/c.duration||0,r=1-i,s=0,l=c.tweens.length;s<l;s++)c.tweens[s].run(r);return a.notifyWith(e,[c,r,n]),r<1&&l?n:(a.resolveWith(e,[c]),!1)},c=a.promise({elem:e,props:he.extend({},t),opts:he.extend(!0,{specialEasing:{},easing:he.easing._default},n),originalProperties:t,originalOptions:n,startTime:pt||O(),duration:n.duration,tweens:[],createTween:function(t,n){var i=he.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(o)return this;for(o=!0;n<i;n++)c.tweens[n].run(1);return t?(a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c,t])):a.rejectWith(e,[c,t]),this}}),u=c.props;for(B(u,c.opts.specialEasing);r<s;r++)if(i=X.prefilters[r].call(c,e,u,c.opts))return he.isFunction(i.stop)&&(he._queueHooks(c.elem,c.opts.queue).stop=he.proxy(i.stop,i)),i;return he.map(u,W,c),he.isFunction(c.opts.start)&&c.opts.start.call(e,c),he.fx.timer(he.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}function Y(e){var t=e.match(De)||[];return t.join(" ")}function _(e){return e.getAttribute&&e.getAttribute("class")||""}function U(e,t,n,i){var o;if(he.isArray(t))he.each(t,function(t,o){n||$t.test(e)?i(e,o):U(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,n,i)});else if(n||"object"!==he.type(t))i(e,t);else for(o in t)U(e+"["+o+"]",t[o],n,i)}function V(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,o=0,r=t.toLowerCase().match(De)||[];if(he.isFunction(n))for(;i=r[o++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function G(e,t,n,i){function o(a){var l;return r[a]=!0,he.each(e[a]||[],function(e,a){var c=a(t,n,i);return"string"!=typeof c||s||r[c]?s?!(l=c):void 0:(t.dataTypes.unshift(c),o(c),!1)}),l}var r={},s=e===Ht;return o(t.dataTypes[0])||!r["*"]&&o("*")}function Z(e,t){var n,i,o=he.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:i||(i={}))[n]=t[n]);return i&&he.extend(!0,e,i),e}function Q(e,t,n){for(var i,o,r,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(o in a)if(a[o]&&a[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||e.converters[o+" "+l[0]]){r=o;break}s||(s=o)}r=r||s}if(r)return r!==l[0]&&l.unshift(r),n[r]}function J(e,t,n,i){var o,r,s,a,l,c={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(r=u.shift();r;)if(e.responseFields[r]&&(n[e.responseFields[r]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=u.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(s=c[l+" "+r]||c["* "+r],!s)for(o in c)if(a=o.split(" "),a[1]===r&&(s=c[l+" "+a[0]]||c["* "+a[0]])){s===!0?s=c[o]:c[o]!==!0&&(r=a[0],u.unshift(a[1]));break}if(s!==!0)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}function K(e){return he.isWindow(e)?e:9===e.nodeType&&e.defaultView}var ee=[],te=e.document,ne=Object.getPrototypeOf,ie=ee.slice,oe=ee.concat,re=ee.push,se=ee.indexOf,ae={},le=ae.toString,ce=ae.hasOwnProperty,ue=ce.toString,de=ue.call(Object),fe={},pe="3.1.1",he=function(e,t){return new he.fn.init(e,t)},ge=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,ve=/^-ms-/,me=/-([a-z])/g,ye=function(e,t){return t.toUpperCase()};he.fn=he.prototype={jquery:pe,constructor:he,length:0,toArray:function(){return ie.call(this)},get:function(e){return null==e?ie.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=he.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return he.each(this,e)},map:function(e){return this.pushStack(he.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(ie.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:re,sort:ee.sort,splice:ee.splice},he.extend=he.fn.extend=function(){var e,t,n,i,o,r,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||he.isFunction(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],i=e[t],s!==i&&(c&&i&&(he.isPlainObject(i)||(o=he.isArray(i)))?(o?(o=!1,r=n&&he.isArray(n)?n:[]):r=n&&he.isPlainObject(n)?n:{},s[t]=he.extend(c,r,i)):void 0!==i&&(s[t]=i));return s},he.extend({expando:"jQuery"+(pe+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===he.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=he.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==le.call(e))&&(!(t=ne(e))||(n=ce.call(t,"constructor")&&t.constructor,"function"==typeof n&&ue.call(n)===de))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?ae[le.call(e)]||"object":typeof e},globalEval:function(e){n(e)},camelCase:function(e){return e.replace(ve,"ms-").replace(me,ye)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var n,o=0;if(i(e))for(n=e.length;o<n&&t.call(e[o],o,e[o])!==!1;o++);else for(o in e)if(t.call(e[o],o,e[o])===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(ge,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(i(Object(e))?he.merge(n,"string"==typeof e?[e]:e):re.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:se.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,o=e.length;i<n;i++)e[o++]=t[i];return e.length=o,e},grep:function(e,t,n){for(var i,o=[],r=0,s=e.length,a=!n;r<s;r++)i=!t(e[r],r),i!==a&&o.push(e[r]);return o},map:function(e,t,n){var o,r,s=0,a=[];if(i(e))for(o=e.length;s<o;s++)r=t(e[s],s,n),null!=r&&a.push(r);else for(s in e)r=t(e[s],s,n),null!=r&&a.push(r);return oe.apply([],a)},guid:1,proxy:function(e,t){var n,i,o;if("string"==typeof t&&(n=e[t],t=e,e=n),he.isFunction(e))return i=ie.call(arguments,2),o=function(){return e.apply(t||this,i.concat(ie.call(arguments)))},o.guid=e.guid=e.guid||he.guid++,o},now:Date.now,support:fe}),"function"==typeof Symbol&&(he.fn[Symbol.iterator]=ee[Symbol.iterator]),he.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){ae["[object "+t+"]"]=t.toLowerCase()});var be=function(e){function t(e,t,n,i){var o,r,s,a,l,c,u,f=t&&t.ownerDocument,h=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==h&&9!==h&&11!==h)return n;if(!i&&((t?t.ownerDocument||t:W)!==j&&L(t),t=t||j,N)){if(11!==h&&(l=me.exec(e)))if(o=l[1]){if(9===h){if(!(s=t.getElementById(o)))return n;if(s.id===o)return n.push(s),n}else if(f&&(s=f.getElementById(o))&&O(t,s)&&s.id===o)return n.push(s),n}else{if(l[2])return J.apply(n,t.getElementsByTagName(e)),n;if((o=l[3])&&S.getElementsByClassName&&t.getElementsByClassName)return J.apply(n,t.getElementsByClassName(o)),n}if(S.qsa&&!_[e+" "]&&(!q||!q.test(e))){if(1!==h)f=t,u=e;else if("object"!==t.nodeName.toLowerCase()){for((a=t.getAttribute("id"))?a=a.replace(we,Se):t.setAttribute("id",a=R),c=$(e),r=c.length;r--;)c[r]="#"+a+" "+p(c[r]);u=c.join(","),f=ye.test(e)&&d(t.parentNode)||t}if(u)try{return J.apply(n,f.querySelectorAll(u)),n}catch(e){}finally{a===R&&t.removeAttribute("id")}}}return E(e.replace(ae,"$1"),t,n,i)}function n(){function e(n,i){return t.push(n+" ")>C.cacheLength&&delete e[t.shift()],e[n+" "]=i}var t=[];return e}function i(e){return e[R]=!0,e}function o(e){var t=j.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function r(e,t){for(var n=e.split("|"),i=n.length;i--;)C.attrHandle[n[i]]=t}function s(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function a(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function l(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function c(e){return function(t){return"form"in t?t.parentNode&&t.disabled===!1?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&Te(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function u(e){return i(function(t){return t=+t,i(function(n,i){for(var o,r=e([],n.length,t),s=r.length;s--;)n[o=r[s]]&&(n[o]=!(i[o]=n[o]))})})}function d(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function f(){}function p(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function h(e,t,n){var i=t.dir,o=t.next,r=o||i,s=n&&"parentNode"===r,a=B++;return t.first?function(t,n,o){for(;t=t[i];)if(1===t.nodeType||s)return e(t,n,o);return!1}:function(t,n,l){var c,u,d,f=[z,a];if(l){for(;t=t[i];)if((1===t.nodeType||s)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||s)if(d=t[R]||(t[R]={}),u=d[t.uniqueID]||(d[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[i]||t;else{if((c=u[r])&&c[0]===z&&c[1]===a)return f[2]=c[2];if(u[r]=f,f[2]=e(t,n,l))return!0}return!1}}function g(e){return e.length>1?function(t,n,i){for(var o=e.length;o--;)if(!e[o](t,n,i))return!1;return!0}:e[0]}function v(e,n,i){for(var o=0,r=n.length;o<r;o++)t(e,n[o],i);return i}function m(e,t,n,i,o){for(var r,s=[],a=0,l=e.length,c=null!=t;a<l;a++)(r=e[a])&&(n&&!n(r,i,o)||(s.push(r),c&&t.push(a)));return s}function y(e,t,n,o,r,s){return o&&!o[R]&&(o=y(o)),r&&!r[R]&&(r=y(r,s)),i(function(i,s,a,l){var c,u,d,f=[],p=[],h=s.length,g=i||v(t||"*",a.nodeType?[a]:a,[]),y=!e||!i&&t?g:m(g,f,e,a,l),b=n?r||(i?e:h||o)?[]:s:y;if(n&&n(y,b,a,l),o)for(c=m(b,p),o(c,[],a,l),u=c.length;u--;)(d=c[u])&&(b[p[u]]=!(y[p[u]]=d));if(i){if(r||e){if(r){for(c=[],u=b.length;u--;)(d=b[u])&&c.push(y[u]=d);r(null,b=[],c,l)}for(u=b.length;u--;)(d=b[u])&&(c=r?ee(i,d):f[u])>-1&&(i[c]=!(s[c]=d))}}else b=m(b===s?b.splice(h,b.length):b),r?r(null,s,b,l):J.apply(s,b)})}function b(e){for(var t,n,i,o=e.length,r=C.relative[e[0].type],s=r||C.relative[" "],a=r?1:0,l=h(function(e){return e===t},s,!0),c=h(function(e){return ee(t,e)>-1},s,!0),u=[function(e,n,i){var o=!r&&(i||n!==A)||((t=n).nodeType?l(e,n,i):c(e,n,i));return t=null,o}];a<o;a++)if(n=C.relative[e[a].type])u=[h(g(u),n)];else{if(n=C.filter[e[a].type].apply(null,e[a].matches),n[R]){for(i=++a;i<o&&!C.relative[e[i].type];i++);return y(a>1&&g(u),a>1&&p(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(ae,"$1"),n,a<i&&b(e.slice(a,i)),i<o&&b(e=e.slice(i)),i<o&&p(e))}u.push(n)}return g(u)}function x(e,n){var o=n.length>0,r=e.length>0,s=function(i,s,a,l,c){var u,d,f,p=0,h="0",g=i&&[],v=[],y=A,b=i||r&&C.find.TAG("*",c),x=z+=null==y?1:Math.random()||.1,w=b.length;for(c&&(A=s===j||s||c);h!==w&&null!=(u=b[h]);h++){if(r&&u){for(d=0,s||u.ownerDocument===j||(L(u),a=!N);f=e[d++];)if(f(u,s||j,a)){l.push(u);break}c&&(z=x)}o&&((u=!f&&u)&&p--,i&&g.push(u))}if(p+=h,o&&h!==p){for(d=0;f=n[d++];)f(g,v,s,a);if(i){if(p>0)for(;h--;)g[h]||v[h]||(v[h]=Z.call(l));v=m(v)}J.apply(l,v),c&&!i&&v.length>0&&p+n.length>1&&t.uniqueSort(l)}return c&&(z=x,A=y),g};return o?i(s):s}var w,S,C,T,P,$,k,E,A,D,M,L,j,I,N,q,F,H,O,R="sizzle"+1*new Date,W=e.document,z=0,B=0,X=n(),Y=n(),_=n(),U=function(e,t){return e===t&&(M=!0),0},V={}.hasOwnProperty,G=[],Z=G.pop,Q=G.push,J=G.push,K=G.slice,ee=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ne="[\\x20\\t\\r\\n\\f]",ie="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",oe="\\["+ne+"*("+ie+")(?:"+ne+"*([*^$|!~]?=)"+ne+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+ie+"))|)"+ne+"*\\]",re=":("+ie+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+oe+")*)|.*)\\)|)",se=new RegExp(ne+"+","g"),ae=new RegExp("^"+ne+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ne+"+$","g"),le=new RegExp("^"+ne+"*,"+ne+"*"),ce=new RegExp("^"+ne+"*([>+~]|"+ne+")"+ne+"*"),ue=new RegExp("="+ne+"*([^\\]'\"]*?)"+ne+"*\\]","g"),de=new RegExp(re),fe=new RegExp("^"+ie+"$"),pe={ID:new RegExp("^#("+ie+")"),CLASS:new RegExp("^\\.("+ie+")"),TAG:new RegExp("^("+ie+"|[*])"),ATTR:new RegExp("^"+oe),PSEUDO:new RegExp("^"+re),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ne+"*(even|odd|(([+-]|)(\\d*)n|)"+ne+"*(?:([+-]|)"+ne+"*(\\d+)|))"+ne+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ne+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ne+"*((?:-\\d)?\\d*)"+ne+"*\\)|)(?=[^-]|$)","i")},he=/^(?:input|select|textarea|button)$/i,ge=/^h\d$/i,ve=/^[^{]+\{\s*\[native \w/,me=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ye=/[+~]/,be=new RegExp("\\\\([\\da-f]{1,6}"+ne+"?|("+ne+")|.)","ig"),xe=function(e,t,n){var i="0x"+t-65536;return i!==i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},we=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,Se=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},Ce=function(){L()},Te=h(function(e){return e.disabled===!0&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{J.apply(G=K.call(W.childNodes),W.childNodes),G[W.childNodes.length].nodeType}catch(e){J={apply:G.length?function(e,t){Q.apply(e,K.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}S=t.support={},P=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},L=t.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:W;return i!==j&&9===i.nodeType&&i.documentElement?(j=i,I=j.documentElement,N=!P(j),W!==j&&(n=j.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",Ce,!1):n.attachEvent&&n.attachEvent("onunload",Ce)),S.attributes=o(function(e){return e.className="i",!e.getAttribute("className")}),S.getElementsByTagName=o(function(e){return e.appendChild(j.createComment("")),!e.getElementsByTagName("*").length}),S.getElementsByClassName=ve.test(j.getElementsByClassName),S.getById=o(function(e){return I.appendChild(e).id=R,!j.getElementsByName||!j.getElementsByName(R).length}),S.getById?(C.filter.ID=function(e){var t=e.replace(be,xe);return function(e){return e.getAttribute("id")===t}},C.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&N){var n=t.getElementById(e);return n?[n]:[]}}):(C.filter.ID=function(e){var t=e.replace(be,xe);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},C.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&N){var n,i,o,r=t.getElementById(e);if(r){if(n=r.getAttributeNode("id"),n&&n.value===e)return[r];for(o=t.getElementsByName(e),i=0;r=o[i++];)if(n=r.getAttributeNode("id"),n&&n.value===e)return[r]}return[]}}),C.find.TAG=S.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):S.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],o=0,r=t.getElementsByTagName(e);if("*"===e){for(;n=r[o++];)1===n.nodeType&&i.push(n);return i}return r},C.find.CLASS=S.getElementsByClassName&&function(e,t){if("undefined"!=typeof t.getElementsByClassName&&N)return t.getElementsByClassName(e)},F=[],q=[],(S.qsa=ve.test(j.querySelectorAll))&&(o(function(e){I.appendChild(e).innerHTML="<a id='"+R+"'></a><select id='"+R+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+ne+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||q.push("\\["+ne+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+R+"-]").length||q.push("~="),e.querySelectorAll(":checked").length||q.push(":checked"),e.querySelectorAll("a#"+R+"+*").length||q.push(".#.+[+~]")}),o(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=j.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&q.push("name"+ne+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&q.push(":enabled",":disabled"),I.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&q.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),q.push(",.*:")})),(S.matchesSelector=ve.test(H=I.matches||I.webkitMatchesSelector||I.mozMatchesSelector||I.oMatchesSelector||I.msMatchesSelector))&&o(function(e){S.disconnectedMatch=H.call(e,"*"),H.call(e,"[s!='']:x"),F.push("!=",re)}),q=q.length&&new RegExp(q.join("|")),F=F.length&&new RegExp(F.join("|")),t=ve.test(I.compareDocumentPosition),O=t||ve.test(I.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},U=t?function(e,t){if(e===t)return M=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!S.sortDetached&&t.compareDocumentPosition(e)===n?e===j||e.ownerDocument===W&&O(W,e)?-1:t===j||t.ownerDocument===W&&O(W,t)?1:D?ee(D,e)-ee(D,t):0:4&n?-1:1)}:function(e,t){if(e===t)return M=!0,0;var n,i=0,o=e.parentNode,r=t.parentNode,a=[e],l=[t];if(!o||!r)return e===j?-1:t===j?1:o?-1:r?1:D?ee(D,e)-ee(D,t):0;if(o===r)return s(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;a[i]===l[i];)i++;return i?s(a[i],l[i]):a[i]===W?-1:l[i]===W?1:0},j):j},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==j&&L(e),n=n.replace(ue,"='$1']"),S.matchesSelector&&N&&!_[n+" "]&&(!F||!F.test(n))&&(!q||!q.test(n)))try{var i=H.call(e,n);if(i||S.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return t(n,j,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==j&&L(e),O(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==j&&L(e);var n=C.attrHandle[t.toLowerCase()],i=n&&V.call(C.attrHandle,t.toLowerCase())?n(e,t,!N):void 0;return void 0!==i?i:S.attributes||!N?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},t.escape=function(e){return(e+"").replace(we,Se)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],i=0,o=0;if(M=!S.detectDuplicates,D=!S.sortStable&&e.slice(0),e.sort(U),M){for(;t=e[o++];)t===e[o]&&(i=n.push(o));for(;i--;)e.splice(n[i],1)}return D=null,e},T=t.getText=function(e){var t,n="",i=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=T(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[i++];)n+=T(t);return n},C=t.selectors={cacheLength:50,createPseudo:i,match:pe,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(be,xe),e[3]=(e[3]||e[4]||e[5]||"").replace(be,xe),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return pe.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&de.test(n)&&(t=$(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(be,xe).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=X[e+" "];return t||(t=new RegExp("(^|"+ne+")"+e+"("+ne+"|$)"))&&X(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,i){return function(o){var r=t.attr(o,e);return null==r?"!="===n:!n||(r+="","="===n?r===i:"!="===n?r!==i:"^="===n?i&&0===r.indexOf(i):"*="===n?i&&r.indexOf(i)>-1:"$="===n?i&&r.slice(-i.length)===i:"~="===n?(" "+r.replace(se," ")+" ").indexOf(i)>-1:"|="===n&&(r===i||r.slice(0,i.length+1)===i+"-"))}},CHILD:function(e,t,n,i,o){var r="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===i&&0===o?function(e){return!!e.parentNode}:function(t,n,l){var c,u,d,f,p,h,g=r!==s?"nextSibling":"previousSibling",v=t.parentNode,m=a&&t.nodeName.toLowerCase(),y=!l&&!a,b=!1;if(v){if(r){for(;g;){for(f=t;f=f[g];)if(a?f.nodeName.toLowerCase()===m:1===f.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?v.firstChild:v.lastChild],s&&y){for(f=v,d=f[R]||(f[R]={}),u=d[f.uniqueID]||(d[f.uniqueID]={}),c=u[e]||[],p=c[0]===z&&c[1],b=p&&c[2],f=p&&v.childNodes[p];f=++p&&f&&f[g]||(b=p=0)||h.pop();)if(1===f.nodeType&&++b&&f===t){u[e]=[z,p,b];break}}else if(y&&(f=t,d=f[R]||(f[R]={}),u=d[f.uniqueID]||(d[f.uniqueID]={}),c=u[e]||[],p=c[0]===z&&c[1],b=p),b===!1)for(;(f=++p&&f&&f[g]||(b=p=0)||h.pop())&&((a?f.nodeName.toLowerCase()!==m:1!==f.nodeType)||!++b||(y&&(d=f[R]||(f[R]={}),u=d[f.uniqueID]||(d[f.uniqueID]={}),u[e]=[z,b]),f!==t)););return b-=o,b===i||b%i===0&&b/i>=0}}},PSEUDO:function(e,n){var o,r=C.pseudos[e]||C.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return r[R]?r(n):r.length>1?(o=[e,e,"",n],C.setFilters.hasOwnProperty(e.toLowerCase())?i(function(e,t){for(var i,o=r(e,n),s=o.length;s--;)i=ee(e,o[s]),e[i]=!(t[i]=o[s])}):function(e){return r(e,0,o)}):r}},pseudos:{not:i(function(e){var t=[],n=[],o=k(e.replace(ae,"$1"));return o[R]?i(function(e,t,n,i){for(var r,s=o(e,null,i,[]),a=e.length;a--;)(r=s[a])&&(e[a]=!(t[a]=r))}):function(e,i,r){return t[0]=e,o(t,null,r,n),t[0]=null,!n.pop()}}),has:i(function(e){return function(n){return t(e,n).length>0}}),contains:i(function(e){return e=e.replace(be,xe),function(t){return(t.textContent||t.innerText||T(t)).indexOf(e)>-1}}),lang:i(function(e){return fe.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(be,xe).toLowerCase(),function(t){var n;do if(n=N?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1;
}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===I},focus:function(e){return e===j.activeElement&&(!j.hasFocus||j.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:c(!1),disabled:c(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!C.pseudos.empty(e)},header:function(e){return ge.test(e.nodeName)},input:function(e){return he.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:u(function(){return[0]}),last:u(function(e,t){return[t-1]}),eq:u(function(e,t,n){return[n<0?n+t:n]}),even:u(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:u(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:u(function(e,t,n){for(var i=n<0?n+t:n;--i>=0;)e.push(i);return e}),gt:u(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}},C.pseudos.nth=C.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})C.pseudos[w]=a(w);for(w in{submit:!0,reset:!0})C.pseudos[w]=l(w);return f.prototype=C.filters=C.pseudos,C.setFilters=new f,$=t.tokenize=function(e,n){var i,o,r,s,a,l,c,u=Y[e+" "];if(u)return n?0:u.slice(0);for(a=e,l=[],c=C.preFilter;a;){i&&!(o=le.exec(a))||(o&&(a=a.slice(o[0].length)||a),l.push(r=[])),i=!1,(o=ce.exec(a))&&(i=o.shift(),r.push({value:i,type:o[0].replace(ae," ")}),a=a.slice(i.length));for(s in C.filter)!(o=pe[s].exec(a))||c[s]&&!(o=c[s](o))||(i=o.shift(),r.push({value:i,type:s,matches:o}),a=a.slice(i.length));if(!i)break}return n?a.length:a?t.error(e):Y(e,l).slice(0)},k=t.compile=function(e,t){var n,i=[],o=[],r=_[e+" "];if(!r){for(t||(t=$(e)),n=t.length;n--;)r=b(t[n]),r[R]?i.push(r):o.push(r);r=_(e,x(o,i)),r.selector=e}return r},E=t.select=function(e,t,n,i){var o,r,s,a,l,c="function"==typeof e&&e,u=!i&&$(e=c.selector||e);if(n=n||[],1===u.length){if(r=u[0]=u[0].slice(0),r.length>2&&"ID"===(s=r[0]).type&&9===t.nodeType&&N&&C.relative[r[1].type]){if(t=(C.find.ID(s.matches[0].replace(be,xe),t)||[])[0],!t)return n;c&&(t=t.parentNode),e=e.slice(r.shift().value.length)}for(o=pe.needsContext.test(e)?0:r.length;o--&&(s=r[o],!C.relative[a=s.type]);)if((l=C.find[a])&&(i=l(s.matches[0].replace(be,xe),ye.test(r[0].type)&&d(t.parentNode)||t))){if(r.splice(o,1),e=i.length&&p(r),!e)return J.apply(n,i),n;break}}return(c||k(e,u))(i,t,!N,n,!t||ye.test(e)&&d(t.parentNode)||t),n},S.sortStable=R.split("").sort(U).join("")===R,S.detectDuplicates=!!M,L(),S.sortDetached=o(function(e){return 1&e.compareDocumentPosition(j.createElement("fieldset"))}),o(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||r("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),S.attributes&&o(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||r("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),o(function(e){return null==e.getAttribute("disabled")})||r(te,function(e,t,n){var i;if(!n)return e[t]===!0?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),t}(e);he.find=be,he.expr=be.selectors,he.expr[":"]=he.expr.pseudos,he.uniqueSort=he.unique=be.uniqueSort,he.text=be.getText,he.isXMLDoc=be.isXML,he.contains=be.contains,he.escapeSelector=be.escape;var xe=function(e,t,n){for(var i=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&he(e).is(n))break;i.push(e)}return i},we=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},Se=he.expr.match.needsContext,Ce=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,Te=/^.[^:#\[\.,]*$/;he.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?he.find.matchesSelector(i,e)?[i]:[]:he.find.matches(e,he.grep(t,function(e){return 1===e.nodeType}))},he.fn.extend({find:function(e){var t,n,i=this.length,o=this;if("string"!=typeof e)return this.pushStack(he(e).filter(function(){for(t=0;t<i;t++)if(he.contains(o[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)he.find(e,o[t],n);return i>1?he.uniqueSort(n):n},filter:function(e){return this.pushStack(o(this,e||[],!1))},not:function(e){return this.pushStack(o(this,e||[],!0))},is:function(e){return!!o(this,"string"==typeof e&&Se.test(e)?he(e):e||[],!1).length}});var Pe,$e=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,ke=he.fn.init=function(e,t,n){var i,o;if(!e)return this;if(n=n||Pe,"string"==typeof e){if(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:$e.exec(e),!i||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof he?t[0]:t,he.merge(this,he.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:te,!0)),Ce.test(i[1])&&he.isPlainObject(t))for(i in t)he.isFunction(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return o=te.getElementById(i[2]),o&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):he.isFunction(e)?void 0!==n.ready?n.ready(e):e(he):he.makeArray(e,this)};ke.prototype=he.fn,Pe=he(te);var Ee=/^(?:parents|prev(?:Until|All))/,Ae={children:!0,contents:!0,next:!0,prev:!0};he.fn.extend({has:function(e){var t=he(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(he.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,o=this.length,r=[],s="string"!=typeof e&&he(e);if(!Se.test(e))for(;i<o;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&he.find.matchesSelector(n,e))){r.push(n);break}return this.pushStack(r.length>1?he.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?se.call(he(e),this[0]):se.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(he.uniqueSort(he.merge(this.get(),he(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),he.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return xe(e,"parentNode")},parentsUntil:function(e,t,n){return xe(e,"parentNode",n)},next:function(e){return r(e,"nextSibling")},prev:function(e){return r(e,"previousSibling")},nextAll:function(e){return xe(e,"nextSibling")},prevAll:function(e){return xe(e,"previousSibling")},nextUntil:function(e,t,n){return xe(e,"nextSibling",n)},prevUntil:function(e,t,n){return xe(e,"previousSibling",n)},siblings:function(e){return we((e.parentNode||{}).firstChild,e)},children:function(e){return we(e.firstChild)},contents:function(e){return e.contentDocument||he.merge([],e.childNodes)}},function(e,t){he.fn[e]=function(n,i){var o=he.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(o=he.filter(i,o)),this.length>1&&(Ae[e]||he.uniqueSort(o),Ee.test(e)&&o.reverse()),this.pushStack(o)}});var De=/[^\x20\t\r\n\f]+/g;he.Callbacks=function(e){e="string"==typeof e?s(e):he.extend({},e);var t,n,i,o,r=[],a=[],l=-1,c=function(){for(o=e.once,i=t=!0;a.length;l=-1)for(n=a.shift();++l<r.length;)r[l].apply(n[0],n[1])===!1&&e.stopOnFalse&&(l=r.length,n=!1);e.memory||(n=!1),t=!1,o&&(r=n?[]:"")},u={add:function(){return r&&(n&&!t&&(l=r.length-1,a.push(n)),function t(n){he.each(n,function(n,i){he.isFunction(i)?e.unique&&u.has(i)||r.push(i):i&&i.length&&"string"!==he.type(i)&&t(i)})}(arguments),n&&!t&&c()),this},remove:function(){return he.each(arguments,function(e,t){for(var n;(n=he.inArray(t,r,n))>-1;)r.splice(n,1),n<=l&&l--}),this},has:function(e){return e?he.inArray(e,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return o=a=[],r=n="",this},disabled:function(){return!r},lock:function(){return o=a=[],n||t||(r=n=""),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=n||[],n=[e,n.slice?n.slice():n],a.push(n),t||c()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!i}};return u},he.extend({Deferred:function(t){var n=[["notify","progress",he.Callbacks("memory"),he.Callbacks("memory"),2],["resolve","done",he.Callbacks("once memory"),he.Callbacks("once memory"),0,"resolved"],["reject","fail",he.Callbacks("once memory"),he.Callbacks("once memory"),1,"rejected"]],i="pending",o={state:function(){return i},always:function(){return r.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return he.Deferred(function(t){he.each(n,function(n,i){var o=he.isFunction(e[i[4]])&&e[i[4]];r[i[1]](function(){var e=o&&o.apply(this,arguments);e&&he.isFunction(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[i[0]+"With"](this,o?[e]:arguments)})}),e=null}).promise()},then:function(t,i,o){function r(t,n,i,o){return function(){var c=this,u=arguments,d=function(){var e,d;if(!(t<s)){if(e=i.apply(c,u),e===n.promise())throw new TypeError("Thenable self-resolution");d=e&&("object"==typeof e||"function"==typeof e)&&e.then,he.isFunction(d)?o?d.call(e,r(s,n,a,o),r(s,n,l,o)):(s++,d.call(e,r(s,n,a,o),r(s,n,l,o),r(s,n,a,n.notifyWith))):(i!==a&&(c=void 0,u=[e]),(o||n.resolveWith)(c,u))}},f=o?d:function(){try{d()}catch(e){he.Deferred.exceptionHook&&he.Deferred.exceptionHook(e,f.stackTrace),t+1>=s&&(i!==l&&(c=void 0,u=[e]),n.rejectWith(c,u))}};t?f():(he.Deferred.getStackHook&&(f.stackTrace=he.Deferred.getStackHook()),e.setTimeout(f))}}var s=0;return he.Deferred(function(e){n[0][3].add(r(0,e,he.isFunction(o)?o:a,e.notifyWith)),n[1][3].add(r(0,e,he.isFunction(t)?t:a)),n[2][3].add(r(0,e,he.isFunction(i)?i:l))}).promise()},promise:function(e){return null!=e?he.extend(e,o):o}},r={};return he.each(n,function(e,t){var s=t[2],a=t[5];o[t[1]]=s.add,a&&s.add(function(){i=a},n[3-e][2].disable,n[0][2].lock),s.add(t[3].fire),r[t[0]]=function(){return r[t[0]+"With"](this===r?void 0:this,arguments),this},r[t[0]+"With"]=s.fireWith}),o.promise(r),t&&t.call(r,r),r},when:function(e){var t=arguments.length,n=t,i=Array(n),o=ie.call(arguments),r=he.Deferred(),s=function(e){return function(n){i[e]=this,o[e]=arguments.length>1?ie.call(arguments):n,--t||r.resolveWith(i,o)}};if(t<=1&&(c(e,r.done(s(n)).resolve,r.reject),"pending"===r.state()||he.isFunction(o[n]&&o[n].then)))return r.then();for(;n--;)c(o[n],s(n),r.reject);return r.promise()}});var Me=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;he.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&Me.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},he.readyException=function(t){e.setTimeout(function(){throw t})};var Le=he.Deferred();he.fn.ready=function(e){return Le.then(e).catch(function(e){he.readyException(e)}),this},he.extend({isReady:!1,readyWait:1,holdReady:function(e){e?he.readyWait++:he.ready(!0)},ready:function(e){(e===!0?--he.readyWait:he.isReady)||(he.isReady=!0,e!==!0&&--he.readyWait>0||Le.resolveWith(te,[he]))}}),he.ready.then=Le.then,"complete"===te.readyState||"loading"!==te.readyState&&!te.documentElement.doScroll?e.setTimeout(he.ready):(te.addEventListener("DOMContentLoaded",u),e.addEventListener("load",u));var je=function(e,t,n,i,o,r,s){var a=0,l=e.length,c=null==n;if("object"===he.type(n)){o=!0;for(a in n)je(e,t,a,n[a],!0,r,s)}else if(void 0!==i&&(o=!0,he.isFunction(i)||(s=!0),c&&(s?(t.call(e,i),t=null):(c=t,t=function(e,t,n){return c.call(he(e),n)})),t))for(;a<l;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return o?e:c?t.call(e):l?t(e[0],n):r},Ie=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};d.uid=1,d.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Ie(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,o=this.cache(e);if("string"==typeof t)o[he.camelCase(t)]=n;else for(i in t)o[he.camelCase(i)]=t[i];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][he.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){he.isArray(t)?t=t.map(he.camelCase):(t=he.camelCase(t),t=t in i?[t]:t.match(De)||[]),n=t.length;for(;n--;)delete i[t[n]]}(void 0===t||he.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!he.isEmptyObject(t)}};var Ne=new d,qe=new d,Fe=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,He=/[A-Z]/g;he.extend({hasData:function(e){return qe.hasData(e)||Ne.hasData(e)},data:function(e,t,n){return qe.access(e,t,n)},removeData:function(e,t){qe.remove(e,t)},_data:function(e,t,n){return Ne.access(e,t,n)},_removeData:function(e,t){Ne.remove(e,t)}}),he.fn.extend({data:function(e,t){var n,i,o,r=this[0],s=r&&r.attributes;if(void 0===e){if(this.length&&(o=qe.get(r),1===r.nodeType&&!Ne.get(r,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&(i=s[n].name,0===i.indexOf("data-")&&(i=he.camelCase(i.slice(5)),p(r,i,o[i])));Ne.set(r,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each(function(){qe.set(this,e)}):je(this,function(t){var n;if(r&&void 0===t){if(n=qe.get(r,e),void 0!==n)return n;if(n=p(r,e),void 0!==n)return n}else this.each(function(){qe.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){qe.remove(this,e)})}}),he.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=Ne.get(e,t),n&&(!i||he.isArray(n)?i=Ne.access(e,t,he.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=he.queue(e,t),i=n.length,o=n.shift(),r=he._queueHooks(e,t),s=function(){he.dequeue(e,t)};"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===t&&n.unshift("inprogress"),delete r.stop,o.call(e,s,r)),!i&&r&&r.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Ne.get(e,n)||Ne.access(e,n,{empty:he.Callbacks("once memory").add(function(){Ne.remove(e,[t+"queue",n])})})}}),he.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?he.queue(this[0],e):void 0===t?this:this.each(function(){var n=he.queue(this,e,t);he._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&he.dequeue(this,e)})},dequeue:function(e){return this.each(function(){he.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,o=he.Deferred(),r=this,s=this.length,a=function(){--i||o.resolveWith(r,[r])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)n=Ne.get(r[s],e+"queueHooks"),n&&n.empty&&(i++,n.empty.add(a));return a(),o.promise(t)}});var Oe=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Re=new RegExp("^(?:([+-])=|)("+Oe+")([a-z%]*)$","i"),We=["Top","Right","Bottom","Left"],ze=function(e,t){return e=t||e,"none"===e.style.display||""===e.style.display&&he.contains(e.ownerDocument,e)&&"none"===he.css(e,"display")},Be=function(e,t,n,i){var o,r,s={};for(r in t)s[r]=e.style[r],e.style[r]=t[r];o=n.apply(e,i||[]);for(r in t)e.style[r]=s[r];return o},Xe={};he.fn.extend({show:function(){return v(this,!0)},hide:function(){return v(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ze(this)?he(this).show():he(this).hide()})}});var Ye=/^(?:checkbox|radio)$/i,_e=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Ue=/^$|\/(?:java|ecma)script/i,Ve={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ve.optgroup=Ve.option,Ve.tbody=Ve.tfoot=Ve.colgroup=Ve.caption=Ve.thead,Ve.th=Ve.td;var Ge=/<|&#?\w+;/;!function(){var e=te.createDocumentFragment(),t=e.appendChild(te.createElement("div")),n=te.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),fe.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",fe.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var Ze=te.documentElement,Qe=/^key/,Je=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ke=/^([^.]*)(?:\.(.+)|)/;he.event={global:{},add:function(e,t,n,i,o){var r,s,a,l,c,u,d,f,p,h,g,v=Ne.get(e);if(v)for(n.handler&&(r=n,n=r.handler,o=r.selector),o&&he.find.matchesSelector(Ze,o),n.guid||(n.guid=he.guid++),(l=v.events)||(l=v.events={}),(s=v.handle)||(s=v.handle=function(t){return"undefined"!=typeof he&&he.event.triggered!==t.type?he.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(De)||[""],c=t.length;c--;)a=Ke.exec(t[c])||[],p=g=a[1],h=(a[2]||"").split(".").sort(),p&&(d=he.event.special[p]||{},p=(o?d.delegateType:d.bindType)||p,d=he.event.special[p]||{},u=he.extend({type:p,origType:g,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&he.expr.match.needsContext.test(o),namespace:h.join(".")},r),(f=l[p])||(f=l[p]=[],f.delegateCount=0,d.setup&&d.setup.call(e,i,h,s)!==!1||e.addEventListener&&e.addEventListener(p,s)),d.add&&(d.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),o?f.splice(f.delegateCount++,0,u):f.push(u),he.event.global[p]=!0)},remove:function(e,t,n,i,o){var r,s,a,l,c,u,d,f,p,h,g,v=Ne.hasData(e)&&Ne.get(e);if(v&&(l=v.events)){for(t=(t||"").match(De)||[""],c=t.length;c--;)if(a=Ke.exec(t[c])||[],p=g=a[1],h=(a[2]||"").split(".").sort(),p){for(d=he.event.special[p]||{},p=(i?d.delegateType:d.bindType)||p,f=l[p]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=f.length;r--;)u=f[r],!o&&g!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(f.splice(r,1),u.selector&&f.delegateCount--,d.remove&&d.remove.call(e,u));s&&!f.length&&(d.teardown&&d.teardown.call(e,h,v.handle)!==!1||he.removeEvent(e,p,v.handle),delete l[p])}else for(p in l)he.event.remove(e,p+t[c],n,i,!0);he.isEmptyObject(l)&&Ne.remove(e,"handle events")}},dispatch:function(e){var t,n,i,o,r,s,a=he.event.fix(e),l=new Array(arguments.length),c=(Ne.get(this,"events")||{})[a.type]||[],u=he.event.special[a.type]||{};for(l[0]=a,t=1;t<arguments.length;t++)l[t]=arguments[t];if(a.delegateTarget=this,!u.preDispatch||u.preDispatch.call(this,a)!==!1){for(s=he.event.handlers.call(this,a,c),t=0;(o=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=o.elem,n=0;(r=o.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(r.namespace)||(a.handleObj=r,a.data=r.data,i=((he.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,l),void 0!==i&&(a.result=i)===!1&&(a.preventDefault(),a.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,i,o,r,s,a=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||c.disabled!==!0)){for(r=[],s={},n=0;n<l;n++)i=t[n],o=i.selector+" ",void 0===s[o]&&(s[o]=i.needsContext?he(o,this).index(c)>-1:he.find(o,this,null,[c]).length),s[o]&&r.push(i);r.length&&a.push({elem:c,handlers:r})}return c=this,l<t.length&&a.push({elem:c,handlers:t.slice(l)}),a},addProp:function(e,t){Object.defineProperty(he.Event.prototype,e,{enumerable:!0,configurable:!0,get:he.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[he.expando]?e:new he.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==S()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===S()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&he.nodeName(this,"input"))return this.click(),!1},_default:function(e){return he.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},he.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},he.Event=function(e,t){return this instanceof he.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?x:w,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&he.extend(this,t),this.timeStamp=e&&e.timeStamp||he.now(),void(this[he.expando]=!0)):new he.Event(e,t)},he.Event.prototype={constructor:he.Event,isDefaultPrevented:w,isPropagationStopped:w,isImmediatePropagationStopped:w,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=x,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=x,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=x,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},he.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Qe.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Je.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},he.event.addProp),he.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){he.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,o=e.relatedTarget,r=e.handleObj;return o&&(o===i||he.contains(i,o))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}}),he.fn.extend({on:function(e,t,n,i){return C(this,e,t,n,i)},one:function(e,t,n,i){return C(this,e,t,n,i,1)},off:function(e,t,n){var i,o;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,he(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return t!==!1&&"function"!=typeof t||(n=t,t=void 0),n===!1&&(n=w),this.each(function(){he.event.remove(this,e,n,t)})}});var et=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,tt=/<script|<style|<link/i,nt=/checked\s*(?:[^=]|=\s*.checked.)/i,it=/^true\/(.*)/,ot=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;he.extend({htmlPrefilter:function(e){return e.replace(et,"<$1></$2>")},clone:function(e,t,n){var i,o,r,s,a=e.cloneNode(!0),l=he.contains(e.ownerDocument,e);if(!(fe.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||he.isXMLDoc(e)))for(s=m(a),r=m(e),i=0,o=r.length;i<o;i++)E(r[i],s[i]);if(t)if(n)for(r=r||m(e),s=s||m(a),i=0,o=r.length;i<o;i++)k(r[i],s[i]);else k(e,a);return s=m(a,"script"),s.length>0&&y(s,!l&&m(e,"script")),a},cleanData:function(e){for(var t,n,i,o=he.event.special,r=0;void 0!==(n=e[r]);r++)if(Ie(n)){if(t=n[Ne.expando]){if(t.events)for(i in t.events)o[i]?he.event.remove(n,i):he.removeEvent(n,i,t.handle);n[Ne.expando]=void 0}n[qe.expando]&&(n[qe.expando]=void 0)}}}),he.fn.extend({detach:function(e){return D(this,e,!0)},remove:function(e){return D(this,e)},text:function(e){return je(this,function(e){return void 0===e?he.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return A(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=T(this,e);t.appendChild(e)}})},prepend:function(){return A(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=T(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return A(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return A(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(he.cleanData(m(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return he.clone(this,e,t)})},html:function(e){return je(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!tt.test(e)&&!Ve[(_e.exec(e)||["",""])[1].toLowerCase()]){e=he.htmlPrefilter(e);try{for(;n<i;n++)t=this[n]||{},1===t.nodeType&&(he.cleanData(m(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return A(this,arguments,function(t){var n=this.parentNode;he.inArray(this,e)<0&&(he.cleanData(m(this)),n&&n.replaceChild(t,this))},e)}}),he.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){he.fn[e]=function(e){for(var n,i=[],o=he(e),r=o.length-1,s=0;s<=r;s++)n=s===r?this:this.clone(!0),he(o[s])[t](n),re.apply(i,n.get());return this.pushStack(i)}});var rt=/^margin/,st=new RegExp("^("+Oe+")(?!px)[a-z%]+$","i"),at=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)};!function(){function t(){if(a){a.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Ze.appendChild(s);var t=e.getComputedStyle(a);n="1%"!==t.top,r="2px"===t.marginLeft,i="4px"===t.width,a.style.marginRight="50%",o="4px"===t.marginRight,Ze.removeChild(s),a=null}}var n,i,o,r,s=te.createElement("div"),a=te.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",fe.clearCloneStyle="content-box"===a.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(a),he.extend(fe,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return t(),i},pixelMarginRight:function(){return t(),o},reliableMarginLeft:function(){return t(),r}}))}();var lt=/^(none|table(?!-c[ea]).+)/,ct={position:"absolute",visibility:"hidden",display:"block"},ut={letterSpacing:"0",fontWeight:"400"},dt=["Webkit","Moz","ms"],ft=te.createElement("div").style;he.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=M(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,r,s,a=he.camelCase(t),l=e.style;return t=he.cssProps[a]||(he.cssProps[a]=j(a)||a),s=he.cssHooks[t]||he.cssHooks[a],void 0===n?s&&"get"in s&&void 0!==(o=s.get(e,!1,i))?o:l[t]:(r=typeof n,"string"===r&&(o=Re.exec(n))&&o[1]&&(n=h(e,t,o),r="number"),null!=n&&n===n&&("number"===r&&(n+=o&&o[3]||(he.cssNumber[a]?"":"px")),fe.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(l[t]=n)),void 0)}},css:function(e,t,n,i){var o,r,s,a=he.camelCase(t);return t=he.cssProps[a]||(he.cssProps[a]=j(a)||a),s=he.cssHooks[t]||he.cssHooks[a],s&&"get"in s&&(o=s.get(e,!0,n)),void 0===o&&(o=M(e,t,i)),"normal"===o&&t in ut&&(o=ut[t]),""===n||n?(r=parseFloat(o),n===!0||isFinite(r)?r||0:o):o}}),he.each(["height","width"],function(e,t){he.cssHooks[t]={get:function(e,n,i){if(n)return!lt.test(he.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?q(e,t,i):Be(e,ct,function(){return q(e,t,i)})},set:function(e,n,i){var o,r=i&&at(e),s=i&&N(e,t,i,"border-box"===he.css(e,"boxSizing",!1,r),r);return s&&(o=Re.exec(n))&&"px"!==(o[3]||"px")&&(e.style[t]=n,n=he.css(e,t)),I(e,n,s)}}}),he.cssHooks.marginLeft=L(fe.reliableMarginLeft,function(e,t){if(t)return(parseFloat(M(e,"marginLeft"))||e.getBoundingClientRect().left-Be(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),he.each({margin:"",padding:"",border:"Width"},function(e,t){he.cssHooks[e+t]={expand:function(n){for(var i=0,o={},r="string"==typeof n?n.split(" "):[n];i<4;i++)o[e+We[i]+t]=r[i]||r[i-2]||r[0];return o}},rt.test(e)||(he.cssHooks[e+t].set=I)}),he.fn.extend({css:function(e,t){return je(this,function(e,t,n){var i,o,r={},s=0;if(he.isArray(t)){for(i=at(e),o=t.length;s<o;s++)r[t[s]]=he.css(e,t[s],!1,i);return r}return void 0!==n?he.style(e,t,n):he.css(e,t)},e,t,arguments.length>1)}}),he.Tween=F,F.prototype={constructor:F,init:function(e,t,n,i,o,r){this.elem=e,this.prop=n,this.easing=o||he.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=r||(he.cssNumber[n]?"":"px")},cur:function(){var e=F.propHooks[this.prop];return e&&e.get?e.get(this):F.propHooks._default.get(this)},run:function(e){var t,n=F.propHooks[this.prop];return this.options.duration?this.pos=t=he.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):F.propHooks._default.set(this),this}},F.prototype.init.prototype=F.prototype,F.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=he.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){he.fx.step[e.prop]?he.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[he.cssProps[e.prop]]&&!he.cssHooks[e.prop]?e.elem[e.prop]=e.now:he.style(e.elem,e.prop,e.now+e.unit)}}},F.propHooks.scrollTop=F.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},he.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},he.fx=F.prototype.init,he.fx.step={};var pt,ht,gt=/^(?:toggle|show|hide)$/,vt=/queueHooks$/;he.Animation=he.extend(X,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return h(n.elem,e,Re.exec(t),n),n}]},tweener:function(e,t){he.isFunction(e)?(t=e,e=["*"]):e=e.match(De);for(var n,i=0,o=e.length;i<o;i++)n=e[i],X.tweeners[n]=X.tweeners[n]||[],X.tweeners[n].unshift(t)},prefilters:[z],prefilter:function(e,t){t?X.prefilters.unshift(e):X.prefilters.push(e)}}),he.speed=function(e,t,n){var i=e&&"object"==typeof e?he.extend({},e):{complete:n||!n&&t||he.isFunction(e)&&e,duration:e,easing:n&&t||t&&!he.isFunction(t)&&t};return he.fx.off||te.hidden?i.duration=0:"number"!=typeof i.duration&&(i.duration in he.fx.speeds?i.duration=he.fx.speeds[i.duration]:i.duration=he.fx.speeds._default),null!=i.queue&&i.queue!==!0||(i.queue="fx"),i.old=i.complete,i.complete=function(){he.isFunction(i.old)&&i.old.call(this),i.queue&&he.dequeue(this,i.queue)},i},he.fn.extend({fadeTo:function(e,t,n,i){return this.filter(ze).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var o=he.isEmptyObject(e),r=he.speed(t,n,i),s=function(){var t=X(this,he.extend({},e),r);(o||Ne.get(this,"finish"))&&t.stop(!0)};return s.finish=s,o||r.queue===!1?this.each(s):this.queue(r.queue,s)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,o=null!=e&&e+"queueHooks",r=he.timers,s=Ne.get(this);
if(o)s[o]&&s[o].stop&&i(s[o]);else for(o in s)s[o]&&s[o].stop&&vt.test(o)&&i(s[o]);for(o=r.length;o--;)r[o].elem!==this||null!=e&&r[o].queue!==e||(r[o].anim.stop(n),t=!1,r.splice(o,1));!t&&n||he.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=Ne.get(this),i=n[e+"queue"],o=n[e+"queueHooks"],r=he.timers,s=i?i.length:0;for(n.finish=!0,he.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=r.length;t--;)r[t].elem===this&&r[t].queue===e&&(r[t].anim.stop(!0),r.splice(t,1));for(t=0;t<s;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),he.each(["toggle","show","hide"],function(e,t){var n=he.fn[t];he.fn[t]=function(e,i,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(R(t,!0),e,i,o)}}),he.each({slideDown:R("show"),slideUp:R("hide"),slideToggle:R("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){he.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),he.timers=[],he.fx.tick=function(){var e,t=0,n=he.timers;for(pt=he.now();t<n.length;t++)e=n[t],e()||n[t]!==e||n.splice(t--,1);n.length||he.fx.stop(),pt=void 0},he.fx.timer=function(e){he.timers.push(e),e()?he.fx.start():he.timers.pop()},he.fx.interval=13,he.fx.start=function(){ht||(ht=e.requestAnimationFrame?e.requestAnimationFrame(H):e.setInterval(he.fx.tick,he.fx.interval))},he.fx.stop=function(){e.cancelAnimationFrame?e.cancelAnimationFrame(ht):e.clearInterval(ht),ht=null},he.fx.speeds={slow:600,fast:200,_default:400},he.fn.delay=function(t,n){return t=he.fx?he.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,i){var o=e.setTimeout(n,t);i.stop=function(){e.clearTimeout(o)}})},function(){var e=te.createElement("input"),t=te.createElement("select"),n=t.appendChild(te.createElement("option"));e.type="checkbox",fe.checkOn=""!==e.value,fe.optSelected=n.selected,e=te.createElement("input"),e.value="t",e.type="radio",fe.radioValue="t"===e.value}();var mt,yt=he.expr.attrHandle;he.fn.extend({attr:function(e,t){return je(this,he.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){he.removeAttr(this,e)})}}),he.extend({attr:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return"undefined"==typeof e.getAttribute?he.prop(e,t,n):(1===r&&he.isXMLDoc(e)||(o=he.attrHooks[t.toLowerCase()]||(he.expr.match.bool.test(t)?mt:void 0)),void 0!==n?null===n?void he.removeAttr(e,t):o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(i=o.get(e,t))?i:(i=he.find.attr(e,t),null==i?void 0:i))},attrHooks:{type:{set:function(e,t){if(!fe.radioValue&&"radio"===t&&he.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,o=t&&t.match(De);if(o&&1===e.nodeType)for(;n=o[i++];)e.removeAttribute(n)}}),mt={set:function(e,t,n){return t===!1?he.removeAttr(e,n):e.setAttribute(n,n),n}},he.each(he.expr.match.bool.source.match(/\w+/g),function(e,t){var n=yt[t]||he.find.attr;yt[t]=function(e,t,i){var o,r,s=t.toLowerCase();return i||(r=yt[s],yt[s]=o,o=null!=n(e,t,i)?s:null,yt[s]=r),o}});var bt=/^(?:input|select|textarea|button)$/i,xt=/^(?:a|area)$/i;he.fn.extend({prop:function(e,t){return je(this,he.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[he.propFix[e]||e]})}}),he.extend({prop:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&he.isXMLDoc(e)||(t=he.propFix[t]||t,o=he.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:e[t]=n:o&&"get"in o&&null!==(i=o.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=he.find.attr(e,"tabindex");return t?parseInt(t,10):bt.test(e.nodeName)||xt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),fe.optSelected||(he.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),he.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){he.propFix[this.toLowerCase()]=this}),he.fn.extend({addClass:function(e){var t,n,i,o,r,s,a,l=0;if(he.isFunction(e))return this.each(function(t){he(this).addClass(e.call(this,t,_(this)))});if("string"==typeof e&&e)for(t=e.match(De)||[];n=this[l++];)if(o=_(n),i=1===n.nodeType&&" "+Y(o)+" "){for(s=0;r=t[s++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");a=Y(i),o!==a&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,i,o,r,s,a,l=0;if(he.isFunction(e))return this.each(function(t){he(this).removeClass(e.call(this,t,_(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(De)||[];n=this[l++];)if(o=_(n),i=1===n.nodeType&&" "+Y(o)+" "){for(s=0;r=t[s++];)for(;i.indexOf(" "+r+" ")>-1;)i=i.replace(" "+r+" "," ");a=Y(i),o!==a&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):he.isFunction(e)?this.each(function(n){he(this).toggleClass(e.call(this,n,_(this),t),t)}):this.each(function(){var t,i,o,r;if("string"===n)for(i=0,o=he(this),r=e.match(De)||[];t=r[i++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||(t=_(this),t&&Ne.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||e===!1?"":Ne.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+Y(_(n))+" ").indexOf(t)>-1)return!0;return!1}});var wt=/\r/g;he.fn.extend({val:function(e){var t,n,i,o=this[0];{if(arguments.length)return i=he.isFunction(e),this.each(function(n){var o;1===this.nodeType&&(o=i?e.call(this,n,he(this).val()):e,null==o?o="":"number"==typeof o?o+="":he.isArray(o)&&(o=he.map(o,function(e){return null==e?"":e+""})),t=he.valHooks[this.type]||he.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))});if(o)return t=he.valHooks[o.type]||he.valHooks[o.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:(n=o.value,"string"==typeof n?n.replace(wt,""):null==n?"":n)}}}),he.extend({valHooks:{option:{get:function(e){var t=he.find.attr(e,"value");return null!=t?t:Y(he.text(e))}},select:{get:function(e){var t,n,i,o=e.options,r=e.selectedIndex,s="select-one"===e.type,a=s?null:[],l=s?r+1:o.length;for(i=r<0?l:s?r:0;i<l;i++)if(n=o[i],(n.selected||i===r)&&!n.disabled&&(!n.parentNode.disabled||!he.nodeName(n.parentNode,"optgroup"))){if(t=he(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,i,o=e.options,r=he.makeArray(t),s=o.length;s--;)i=o[s],(i.selected=he.inArray(he.valHooks.option.get(i),r)>-1)&&(n=!0);return n||(e.selectedIndex=-1),r}}}}),he.each(["radio","checkbox"],function(){he.valHooks[this]={set:function(e,t){if(he.isArray(t))return e.checked=he.inArray(he(e).val(),t)>-1}},fe.checkOn||(he.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var St=/^(?:focusinfocus|focusoutblur)$/;he.extend(he.event,{trigger:function(t,n,i,o){var r,s,a,l,c,u,d,f=[i||te],p=ce.call(t,"type")?t.type:t,h=ce.call(t,"namespace")?t.namespace.split("."):[];if(s=a=i=i||te,3!==i.nodeType&&8!==i.nodeType&&!St.test(p+he.event.triggered)&&(p.indexOf(".")>-1&&(h=p.split("."),p=h.shift(),h.sort()),c=p.indexOf(":")<0&&"on"+p,t=t[he.expando]?t:new he.Event(p,"object"==typeof t&&t),t.isTrigger=o?2:3,t.namespace=h.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:he.makeArray(n,[t]),d=he.event.special[p]||{},o||!d.trigger||d.trigger.apply(i,n)!==!1)){if(!o&&!d.noBubble&&!he.isWindow(i)){for(l=d.delegateType||p,St.test(l+p)||(s=s.parentNode);s;s=s.parentNode)f.push(s),a=s;a===(i.ownerDocument||te)&&f.push(a.defaultView||a.parentWindow||e)}for(r=0;(s=f[r++])&&!t.isPropagationStopped();)t.type=r>1?l:d.bindType||p,u=(Ne.get(s,"events")||{})[t.type]&&Ne.get(s,"handle"),u&&u.apply(s,n),u=c&&s[c],u&&u.apply&&Ie(s)&&(t.result=u.apply(s,n),t.result===!1&&t.preventDefault());return t.type=p,o||t.isDefaultPrevented()||d._default&&d._default.apply(f.pop(),n)!==!1||!Ie(i)||c&&he.isFunction(i[p])&&!he.isWindow(i)&&(a=i[c],a&&(i[c]=null),he.event.triggered=p,i[p](),he.event.triggered=void 0,a&&(i[c]=a)),t.result}},simulate:function(e,t,n){var i=he.extend(new he.Event,n,{type:e,isSimulated:!0});he.event.trigger(i,null,t)}}),he.fn.extend({trigger:function(e,t){return this.each(function(){he.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return he.event.trigger(e,t,n,!0)}}),he.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){he.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),he.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),fe.focusin="onfocusin"in e,fe.focusin||he.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){he.event.simulate(t,e.target,he.event.fix(e))};he.event.special[t]={setup:function(){var i=this.ownerDocument||this,o=Ne.access(i,t);o||i.addEventListener(e,n,!0),Ne.access(i,t,(o||0)+1)},teardown:function(){var i=this.ownerDocument||this,o=Ne.access(i,t)-1;o?Ne.access(i,t,o):(i.removeEventListener(e,n,!0),Ne.remove(i,t))}}});var Ct=e.location,Tt=he.now(),Pt=/\?/;he.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||he.error("Invalid XML: "+t),n};var $t=/\[\]$/,kt=/\r?\n/g,Et=/^(?:submit|button|image|reset|file)$/i,At=/^(?:input|select|textarea|keygen)/i;he.param=function(e,t){var n,i=[],o=function(e,t){var n=he.isFunction(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(he.isArray(e)||e.jquery&&!he.isPlainObject(e))he.each(e,function(){o(this.name,this.value)});else for(n in e)U(n,e[n],t,o);return i.join("&")},he.fn.extend({serialize:function(){return he.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=he.prop(this,"elements");return e?he.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!he(this).is(":disabled")&&At.test(this.nodeName)&&!Et.test(e)&&(this.checked||!Ye.test(e))}).map(function(e,t){var n=he(this).val();return null==n?null:he.isArray(n)?he.map(n,function(e){return{name:t.name,value:e.replace(kt,"\r\n")}}):{name:t.name,value:n.replace(kt,"\r\n")}}).get()}});var Dt=/%20/g,Mt=/#.*$/,Lt=/([?&])_=[^&]*/,jt=/^(.*?):[ \t]*([^\r\n]*)$/gm,It=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Nt=/^(?:GET|HEAD)$/,qt=/^\/\//,Ft={},Ht={},Ot="*/".concat("*"),Rt=te.createElement("a");Rt.href=Ct.href,he.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ct.href,type:"GET",isLocal:It.test(Ct.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ot,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":he.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Z(Z(e,he.ajaxSettings),t):Z(he.ajaxSettings,e)},ajaxPrefilter:V(Ft),ajaxTransport:V(Ht),ajax:function(t,n){function i(t,n,i,a){var c,f,p,x,w,S=n;u||(u=!0,l&&e.clearTimeout(l),o=void 0,s=a||"",C.readyState=t>0?4:0,c=t>=200&&t<300||304===t,i&&(x=Q(h,C,i)),x=J(h,x,C,c),c?(h.ifModified&&(w=C.getResponseHeader("Last-Modified"),w&&(he.lastModified[r]=w),w=C.getResponseHeader("etag"),w&&(he.etag[r]=w)),204===t||"HEAD"===h.type?S="nocontent":304===t?S="notmodified":(S=x.state,f=x.data,p=x.error,c=!p)):(p=S,!t&&S||(S="error",t<0&&(t=0))),C.status=t,C.statusText=(n||S)+"",c?m.resolveWith(g,[f,S,C]):m.rejectWith(g,[C,S,p]),C.statusCode(b),b=void 0,d&&v.trigger(c?"ajaxSuccess":"ajaxError",[C,h,c?f:p]),y.fireWith(g,[C,S]),d&&(v.trigger("ajaxComplete",[C,h]),--he.active||he.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var o,r,s,a,l,c,u,d,f,p,h=he.ajaxSetup({},n),g=h.context||h,v=h.context&&(g.nodeType||g.jquery)?he(g):he.event,m=he.Deferred(),y=he.Callbacks("once memory"),b=h.statusCode||{},x={},w={},S="canceled",C={readyState:0,getResponseHeader:function(e){var t;if(u){if(!a)for(a={};t=jt.exec(s);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return u?s:null},setRequestHeader:function(e,t){return null==u&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==u&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)C.always(e[C.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||S;return o&&o.abort(t),i(0,t),this}};if(m.promise(C),h.url=((t||h.url||Ct.href)+"").replace(qt,Ct.protocol+"//"),h.type=n.method||n.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(De)||[""],null==h.crossDomain){c=te.createElement("a");try{c.href=h.url,c.href=c.href,h.crossDomain=Rt.protocol+"//"+Rt.host!=c.protocol+"//"+c.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=he.param(h.data,h.traditional)),G(Ft,h,n,C),u)return C;d=he.event&&h.global,d&&0===he.active++&&he.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Nt.test(h.type),r=h.url.replace(Mt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Dt,"+")):(p=h.url.slice(r.length),h.data&&(r+=(Pt.test(r)?"&":"?")+h.data,delete h.data),h.cache===!1&&(r=r.replace(Lt,"$1"),p=(Pt.test(r)?"&":"?")+"_="+Tt++ +p),h.url=r+p),h.ifModified&&(he.lastModified[r]&&C.setRequestHeader("If-Modified-Since",he.lastModified[r]),he.etag[r]&&C.setRequestHeader("If-None-Match",he.etag[r])),(h.data&&h.hasContent&&h.contentType!==!1||n.contentType)&&C.setRequestHeader("Content-Type",h.contentType),C.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Ot+"; q=0.01":""):h.accepts["*"]);for(f in h.headers)C.setRequestHeader(f,h.headers[f]);if(h.beforeSend&&(h.beforeSend.call(g,C,h)===!1||u))return C.abort();if(S="abort",y.add(h.complete),C.done(h.success),C.fail(h.error),o=G(Ht,h,n,C)){if(C.readyState=1,d&&v.trigger("ajaxSend",[C,h]),u)return C;h.async&&h.timeout>0&&(l=e.setTimeout(function(){C.abort("timeout")},h.timeout));try{u=!1,o.send(x,i)}catch(e){if(u)throw e;i(-1,e)}}else i(-1,"No Transport");return C},getJSON:function(e,t,n){return he.get(e,t,n,"json")},getScript:function(e,t){return he.get(e,void 0,t,"script")}}),he.each(["get","post"],function(e,t){he[t]=function(e,n,i,o){return he.isFunction(n)&&(o=o||i,i=n,n=void 0),he.ajax(he.extend({url:e,type:t,dataType:o,data:n,success:i},he.isPlainObject(e)&&e))}}),he._evalUrl=function(e){return he.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},he.fn.extend({wrapAll:function(e){var t;return this[0]&&(he.isFunction(e)&&(e=e.call(this[0])),t=he(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return he.isFunction(e)?this.each(function(t){he(this).wrapInner(e.call(this,t))}):this.each(function(){var t=he(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=he.isFunction(e);return this.each(function(n){he(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){he(this).replaceWith(this.childNodes)}),this}}),he.expr.pseudos.hidden=function(e){return!he.expr.pseudos.visible(e)},he.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},he.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Wt={0:200,1223:204},zt=he.ajaxSettings.xhr();fe.cors=!!zt&&"withCredentials"in zt,fe.ajax=zt=!!zt,he.ajaxTransport(function(t){var n,i;if(fe.cors||zt&&!t.crossDomain)return{send:function(o,r){var s,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)a[s]=t.xhrFields[s];t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest");for(s in o)a.setRequestHeader(s,o[s]);n=function(e){return function(){n&&(n=i=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?r(0,"error"):r(a.status,a.statusText):r(Wt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=n(),i=a.onerror=n("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&e.setTimeout(function(){n&&i()})},n=n("abort");try{a.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),he.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),he.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return he.globalEval(e),e}}}),he.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),he.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(i,o){t=he("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),te.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Bt=[],Xt=/(=)\?(?=&|$)|\?\?/;he.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Bt.pop()||he.expando+"_"+Tt++;return this[e]=!0,e}}),he.ajaxPrefilter("json jsonp",function(t,n,i){var o,r,s,a=t.jsonp!==!1&&(Xt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Xt.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return o=t.jsonpCallback=he.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Xt,"$1"+o):t.jsonp!==!1&&(t.url+=(Pt.test(t.url)?"&":"?")+t.jsonp+"="+o),t.converters["script json"]=function(){return s||he.error(o+" was not called"),s[0]},t.dataTypes[0]="json",r=e[o],e[o]=function(){s=arguments},i.always(function(){void 0===r?he(e).removeProp(o):e[o]=r,t[o]&&(t.jsonpCallback=n.jsonpCallback,Bt.push(o)),s&&he.isFunction(r)&&r(s[0]),s=r=void 0}),"script"}),fe.createHTMLDocument=function(){var e=te.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),he.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var i,o,r;return t||(fe.createHTMLDocument?(t=te.implementation.createHTMLDocument(""),i=t.createElement("base"),i.href=te.location.href,t.head.appendChild(i)):t=te),o=Ce.exec(e),r=!n&&[],o?[t.createElement(o[1])]:(o=b([e],t,r),r&&r.length&&he(r).remove(),he.merge([],o.childNodes))},he.fn.load=function(e,t,n){var i,o,r,s=this,a=e.indexOf(" ");return a>-1&&(i=Y(e.slice(a)),e=e.slice(0,a)),he.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),s.length>0&&he.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){r=arguments,s.html(i?he("<div>").append(he.parseHTML(e)).find(i):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,r||[e.responseText,t,e])})}),this},he.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){he.fn[t]=function(e){return this.on(t,e)}}),he.expr.pseudos.animated=function(e){return he.grep(he.timers,function(t){return e===t.elem}).length},he.offset={setOffset:function(e,t,n){var i,o,r,s,a,l,c,u=he.css(e,"position"),d=he(e),f={};"static"===u&&(e.style.position="relative"),a=d.offset(),r=he.css(e,"top"),l=he.css(e,"left"),c=("absolute"===u||"fixed"===u)&&(r+l).indexOf("auto")>-1,c?(i=d.position(),s=i.top,o=i.left):(s=parseFloat(r)||0,o=parseFloat(l)||0),he.isFunction(t)&&(t=t.call(e,n,he.extend({},a))),null!=t.top&&(f.top=t.top-a.top+s),null!=t.left&&(f.left=t.left-a.left+o),"using"in t?t.using.call(e,f):d.css(f)}},he.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){he.offset.setOffset(this,e,t)});var t,n,i,o,r=this[0];if(r)return r.getClientRects().length?(i=r.getBoundingClientRect(),i.width||i.height?(o=r.ownerDocument,n=K(o),t=o.documentElement,{top:i.top+n.pageYOffset-t.clientTop,left:i.left+n.pageXOffset-t.clientLeft}):i):{top:0,left:0}},position:function(){if(this[0]){var e,t,n=this[0],i={top:0,left:0};return"fixed"===he.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),he.nodeName(e[0],"html")||(i=e.offset()),i={top:i.top+he.css(e[0],"borderTopWidth",!0),left:i.left+he.css(e[0],"borderLeftWidth",!0)}),{top:t.top-i.top-he.css(n,"marginTop",!0),left:t.left-i.left-he.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===he.css(e,"position");)e=e.offsetParent;return e||Ze})}}),he.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;he.fn[e]=function(i){return je(this,function(e,i,o){var r=K(e);return void 0===o?r?r[t]:e[i]:void(r?r.scrollTo(n?r.pageXOffset:o,n?o:r.pageYOffset):e[i]=o)},e,i,arguments.length)}}),he.each(["top","left"],function(e,t){he.cssHooks[t]=L(fe.pixelPosition,function(e,n){if(n)return n=M(e,t),st.test(n)?he(e).position()[t]+"px":n})}),he.each({Height:"height",Width:"width"},function(e,t){he.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){he.fn[i]=function(o,r){var s=arguments.length&&(n||"boolean"!=typeof o),a=n||(o===!0||r===!0?"margin":"border");return je(this,function(t,n,o){var r;return he.isWindow(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(r=t.documentElement,Math.max(t.body["scroll"+e],r["scroll"+e],t.body["offset"+e],r["offset"+e],r["client"+e])):void 0===o?he.css(t,n,a):he.style(t,n,o,a)},t,s?o:void 0,s)}})}),he.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),he.parseJSON=JSON.parse,"function"==typeof define&&define.amd&&define("jquery",[],function(){return he});var Yt=e.jQuery,_t=e.$;return he.noConflict=function(t){return e.$===he&&(e.$=_t),t&&e.jQuery===he&&(e.jQuery=Yt),he},t||(e.jQuery=e.$=he),he}),function(e){var t={mode:"horizontal",slideSelector:"",infiniteLoop:!0,hideControlOnEnd:!1,speed:500,easing:null,slideMargin:0,startSlide:0,randomStart:!1,captions:!1,ticker:!1,tickerHover:!1,adaptiveHeight:!1,adaptiveHeightSpeed:500,video:!1,useCSS:!0,preloadImages:"visible",responsive:!0,slideZIndex:50,wrapperClass:"bx-wrapper",touchEnabled:!0,swipeThreshold:50,oneToOneTouch:!0,preventDefaultSwipeX:!0,preventDefaultSwipeY:!1,ariaLive:!0,ariaHidden:!0,keyboardEnabled:!1,pager:!0,pagerType:"full",pagerShortSeparator:" / ",pagerSelector:null,buildPager:null,pagerCustom:null,controls:!0,nextText:"Next",prevText:"Prev",nextSelector:null,prevSelector:null,autoControls:!1,startText:"Start",stopText:"Stop",autoControlsCombine:!1,autoControlsSelector:null,auto:!1,pause:4e3,autoStart:!0,autoDirection:"next",stopAutoOnClick:!1,autoHover:!1,autoDelay:0,autoSlideForOnePage:!1,minSlides:1,maxSlides:1,moveSlides:0,slideWidth:0,shrinkItems:!1,onSliderLoad:function(){return!0},onSlideBefore:function(){return!0},onSlideAfter:function(){return!0},onSlideNext:function(){return!0},onSlidePrev:function(){return!0},onSliderResize:function(){return!0}};e.fn.bxSlider=function(n){if(0===this.length)return this;if(this.length>1)return this.each(function(){e(this).bxSlider(n)}),this;var o={},r=this,s=e(window).width(),a=e(window).height();if(!e(r).data("bxSlider")){var l=function(){e(r).data("bxSlider")||(o.settings=e.extend({},t,n),o.settings.slideWidth=parseInt(o.settings.slideWidth),o.children=r.children(o.settings.slideSelector),o.children.length<o.settings.minSlides&&(o.settings.minSlides=o.children.length),o.children.length<o.settings.maxSlides&&(o.settings.maxSlides=o.children.length),o.settings.randomStart&&(o.settings.startSlide=Math.floor(Math.random()*o.children.length)),o.active={index:o.settings.startSlide},o.carousel=o.settings.minSlides>1||o.settings.maxSlides>1,o.carousel&&(o.settings.preloadImages="all"),o.minThreshold=o.settings.minSlides*o.settings.slideWidth+(o.settings.minSlides-1)*o.settings.slideMargin,o.maxThreshold=o.settings.maxSlides*o.settings.slideWidth+(o.settings.maxSlides-1)*o.settings.slideMargin,o.working=!1,o.controls={},o.interval=null,o.animProp="vertical"===o.settings.mode?"top":"left",o.usingCSS=o.settings.useCSS&&"fade"!==o.settings.mode&&function(){for(var e=document.createElement("div"),t=["WebkitPerspective","MozPerspective","OPerspective","msPerspective"],n=0;n<t.length;n++)if(void 0!==e.style[t[n]])return o.cssPrefix=t[n].replace("Perspective","").toLowerCase(),o.animProp="-"+o.cssPrefix+"-transform",!0;return!1}(),"vertical"===o.settings.mode&&(o.settings.maxSlides=o.settings.minSlides),r.data("origStyle",r.attr("style")),r.children(o.settings.slideSelector).each(function(){e(this).data("origStyle",e(this).attr("style"))}),c())},c=function(){var t=o.children.eq(o.settings.startSlide);r.wrap('<div class="'+o.settings.wrapperClass+'"><div class="bx-viewport"></div></div>'),o.viewport=r.parent(),o.settings.ariaLive&&!o.settings.ticker&&o.viewport.attr("aria-live","polite"),o.loader=e('<div class="bx-loading" />'),o.viewport.prepend(o.loader),r.css({width:"horizontal"===o.settings.mode?1e3*o.children.length+215+"%":"auto",position:"relative"}),o.usingCSS&&o.settings.easing?r.css("-"+o.cssPrefix+"-transition-timing-function",o.settings.easing):o.settings.easing||(o.settings.easing="swing"),o.viewport.css({width:"100%",overflow:"hidden",position:"relative"}),o.viewport.parent().css({maxWidth:p()}),o.settings.pager||o.settings.controls||o.viewport.parent().css({margin:"0 auto 0px"}),o.children.css({float:"horizontal"===o.settings.mode?"left":"none",listStyle:"none",position:"relative"}),o.children.css("width",h()),"horizontal"===o.settings.mode&&o.settings.slideMargin>0&&o.children.css("marginRight",o.settings.slideMargin),"vertical"===o.settings.mode&&o.settings.slideMargin>0&&o.children.css("marginBottom",o.settings.slideMargin),"fade"===o.settings.mode&&(o.children.css({position:"absolute",zIndex:0,display:"none"}),o.children.eq(o.settings.startSlide).css({zIndex:o.settings.slideZIndex,display:"block"})),o.controls.el=e('<div class="bx-controls" />'),o.settings.captions&&T(),o.active.last=o.settings.startSlide===v()-1,o.settings.video&&r.fitVids(),("all"===o.settings.preloadImages||o.settings.ticker)&&(t=o.children),o.settings.ticker?o.settings.pager=!1:(o.settings.controls&&S(),o.settings.auto&&o.settings.autoControls&&C(),o.settings.pager&&w(),(o.settings.controls||o.settings.autoControls||o.settings.pager)&&o.viewport.after(o.controls.el)),u(t,d)},u=function(t,n){var i=t.find('img:not([src=""]), iframe').length,o=0;return 0===i?void n():void t.find('img:not([src=""]), iframe').each(function(){e(this).one("load error",function(){++o===i&&n()}).each(function(){this.complete&&e(this).load()})})},d=function(){if(o.settings.infiniteLoop&&"fade"!==o.settings.mode&&!o.settings.ticker){var t="vertical"===o.settings.mode?o.settings.minSlides:o.settings.maxSlides,n=o.children.slice(0,t).clone(!0).addClass("bx-clone"),i=o.children.slice(-t).clone(!0).addClass("bx-clone");o.settings.ariaHidden&&(n.attr("aria-hidden",!0),i.attr("aria-hidden",!0)),r.append(n).prepend(i)}o.loader.remove(),y(),"vertical"===o.settings.mode&&(o.settings.adaptiveHeight=!0),o.viewport.height(f()),r.redrawSlider(),o.settings.onSliderLoad.call(r,o.active.index),o.initialized=!0,o.settings.responsive&&e(window).bind("resize",X),o.settings.auto&&o.settings.autoStart&&(v()>1||o.settings.autoSlideForOnePage)&&I(),o.settings.ticker&&N(),o.settings.pager&&D(o.settings.startSlide),o.settings.controls&&j(),o.settings.touchEnabled&&!o.settings.ticker&&O(),o.settings.keyboardEnabled&&!o.settings.ticker&&e(document).keydown(H)},f=function(){var t=0,n=e();if("vertical"===o.settings.mode||o.settings.adaptiveHeight)if(o.carousel){var r=1===o.settings.moveSlides?o.active.index:o.active.index*m();for(n=o.children.eq(r),i=1;i<=o.settings.maxSlides-1;i++)n=r+i>=o.children.length?n.add(o.children.eq(i-1)):n.add(o.children.eq(r+i))}else n=o.children.eq(o.active.index);else n=o.children;return"vertical"===o.settings.mode?(n.each(function(n){t+=e(this).outerHeight()}),o.settings.slideMargin>0&&(t+=o.settings.slideMargin*(o.settings.minSlides-1))):t=Math.max.apply(Math,n.map(function(){return e(this).outerHeight(!1)}).get()),"border-box"===o.viewport.css("box-sizing")?t+=parseFloat(o.viewport.css("padding-top"))+parseFloat(o.viewport.css("padding-bottom"))+parseFloat(o.viewport.css("border-top-width"))+parseFloat(o.viewport.css("border-bottom-width")):"padding-box"===o.viewport.css("box-sizing")&&(t+=parseFloat(o.viewport.css("padding-top"))+parseFloat(o.viewport.css("padding-bottom"))),t},p=function(){var e="100%";return o.settings.slideWidth>0&&(e="horizontal"===o.settings.mode?o.settings.maxSlides*o.settings.slideWidth+(o.settings.maxSlides-1)*o.settings.slideMargin:o.settings.slideWidth),e},h=function(){var e=o.settings.slideWidth,t=o.viewport.width();if(0===o.settings.slideWidth||o.settings.slideWidth>t&&!o.carousel||"vertical"===o.settings.mode)e=t;else if(o.settings.maxSlides>1&&"horizontal"===o.settings.mode){if(t>o.maxThreshold)return e;t<o.minThreshold?e=(t-o.settings.slideMargin*(o.settings.minSlides-1))/o.settings.minSlides:o.settings.shrinkItems&&(e=Math.floor((t+o.settings.slideMargin)/Math.ceil((t+o.settings.slideMargin)/(e+o.settings.slideMargin))-o.settings.slideMargin))}return e},g=function(){var e=1,t=null;return"horizontal"===o.settings.mode&&o.settings.slideWidth>0?o.viewport.width()<o.minThreshold?e=o.settings.minSlides:o.viewport.width()>o.maxThreshold?e=o.settings.maxSlides:(t=o.children.first().width()+o.settings.slideMargin,e=Math.floor((o.viewport.width()+o.settings.slideMargin)/t)):"vertical"===o.settings.mode&&(e=o.settings.minSlides),e},v=function(){var e=0,t=0,n=0;if(o.settings.moveSlides>0)if(o.settings.infiniteLoop)e=Math.ceil(o.children.length/m());else for(;t<o.children.length;)++e,t=n+g(),n+=o.settings.moveSlides<=g()?o.settings.moveSlides:g();else e=Math.ceil(o.children.length/g());return e},m=function(){return o.settings.moveSlides>0&&o.settings.moveSlides<=g()?o.settings.moveSlides:g()},y=function(){var e,t,n;o.children.length>o.settings.maxSlides&&o.active.last&&!o.settings.infiniteLoop?"horizontal"===o.settings.mode?(t=o.children.last(),e=t.position(),b(-(e.left-(o.viewport.width()-t.outerWidth())),"reset",0)):"vertical"===o.settings.mode&&(n=o.children.length-o.settings.minSlides,e=o.children.eq(n).position(),b(-e.top,"reset",0)):(e=o.children.eq(o.active.index*m()).position(),o.active.index===v()-1&&(o.active.last=!0),void 0!==e&&("horizontal"===o.settings.mode?b(-e.left,"reset",0):"vertical"===o.settings.mode&&b(-e.top,"reset",0)))},b=function(t,n,i,s){var a,l;o.usingCSS?(l="vertical"===o.settings.mode?"translate3d(0, "+t+"px, 0)":"translate3d("+t+"px, 0, 0)",r.css("-"+o.cssPrefix+"-transition-duration",i/1e3+"s"),
"slide"===n?(r.css(o.animProp,l),0!==i?r.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(t){e(t.target).is(r)&&(r.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),M())}):M()):"reset"===n?r.css(o.animProp,l):"ticker"===n&&(r.css("-"+o.cssPrefix+"-transition-timing-function","linear"),r.css(o.animProp,l),0!==i?r.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(t){e(t.target).is(r)&&(r.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),b(s.resetValue,"reset",0),q())}):(b(s.resetValue,"reset",0),q()))):(a={},a[o.animProp]=t,"slide"===n?r.animate(a,i,o.settings.easing,function(){M()}):"reset"===n?r.css(o.animProp,t):"ticker"===n&&r.animate(a,i,"linear",function(){b(s.resetValue,"reset",0),q()}))},x=function(){for(var t="",n="",i=v(),r=0;r<i;r++)n="",o.settings.buildPager&&e.isFunction(o.settings.buildPager)||o.settings.pagerCustom?(n=o.settings.buildPager(r),o.pagerEl.addClass("bx-custom-pager")):(n=r+1,o.pagerEl.addClass("bx-default-pager")),t+='<div class="bx-pager-item"><a href="" data-slide-index="'+r+'" class="bx-pager-link">'+n+"</a></div>";o.pagerEl.html(t)},w=function(){o.settings.pagerCustom?o.pagerEl=e(o.settings.pagerCustom):(o.pagerEl=e('<div class="bx-pager" />'),o.settings.pagerSelector?e(o.settings.pagerSelector).html(o.pagerEl):o.controls.el.addClass("bx-has-pager").append(o.pagerEl),x()),o.pagerEl.on("click touchend","a",A)},S=function(){o.controls.next=e('<a class="bx-next" href="">'+o.settings.nextText+"</a>"),o.controls.prev=e('<a class="bx-prev" href="">'+o.settings.prevText+"</a>"),o.controls.next.bind("click touchend",P),o.controls.prev.bind("click touchend",$),o.settings.nextSelector&&e(o.settings.nextSelector).append(o.controls.next),o.settings.prevSelector&&e(o.settings.prevSelector).append(o.controls.prev),o.settings.nextSelector||o.settings.prevSelector||(o.controls.directionEl=e('<div class="bx-controls-direction" />'),o.controls.directionEl.append(o.controls.prev).append(o.controls.next),o.controls.el.addClass("bx-has-controls-direction").append(o.controls.directionEl))},C=function(){o.controls.start=e('<div class="bx-controls-auto-item"><a class="bx-start" href="">'+o.settings.startText+"</a></div>"),o.controls.stop=e('<div class="bx-controls-auto-item"><a class="bx-stop" href="">'+o.settings.stopText+"</a></div>"),o.controls.autoEl=e('<div class="bx-controls-auto" />'),o.controls.autoEl.on("click",".bx-start",k),o.controls.autoEl.on("click",".bx-stop",E),o.settings.autoControlsCombine?o.controls.autoEl.append(o.controls.start):o.controls.autoEl.append(o.controls.start).append(o.controls.stop),o.settings.autoControlsSelector?e(o.settings.autoControlsSelector).html(o.controls.autoEl):o.controls.el.addClass("bx-has-controls-auto").append(o.controls.autoEl),L(o.settings.autoStart?"stop":"start")},T=function(){o.children.each(function(t){var n=e(this).find("img:first").attr("title");void 0!==n&&(""+n).length&&e(this).append('<div class="bx-caption"><span>'+n+"</span></div>")})},P=function(e){e.preventDefault(),o.controls.el.hasClass("disabled")||(o.settings.auto&&o.settings.stopAutoOnClick&&r.stopAuto(),r.goToNextSlide())},$=function(e){e.preventDefault(),o.controls.el.hasClass("disabled")||(o.settings.auto&&o.settings.stopAutoOnClick&&r.stopAuto(),r.goToPrevSlide())},k=function(e){r.startAuto(),e.preventDefault()},E=function(e){r.stopAuto(),e.preventDefault()},A=function(t){var n,i;t.preventDefault(),o.controls.el.hasClass("disabled")||(o.settings.auto&&o.settings.stopAutoOnClick&&r.stopAuto(),n=e(t.currentTarget),void 0!==n.attr("data-slide-index")&&(i=parseInt(n.attr("data-slide-index")),i!==o.active.index&&r.goToSlide(i)))},D=function(t){var n=o.children.length;return"short"===o.settings.pagerType?(o.settings.maxSlides>1&&(n=Math.ceil(o.children.length/o.settings.maxSlides)),void o.pagerEl.html(t+1+o.settings.pagerShortSeparator+n)):(o.pagerEl.find("a").removeClass("active"),void o.pagerEl.each(function(n,i){e(i).find("a").eq(t).addClass("active")}))},M=function(){if(o.settings.infiniteLoop){var e="";0===o.active.index?e=o.children.eq(0).position():o.active.index===v()-1&&o.carousel?e=o.children.eq((v()-1)*m()).position():o.active.index===o.children.length-1&&(e=o.children.eq(o.children.length-1).position()),e&&("horizontal"===o.settings.mode?b(-e.left,"reset",0):"vertical"===o.settings.mode&&b(-e.top,"reset",0))}o.working=!1,o.settings.onSlideAfter.call(r,o.children.eq(o.active.index),o.oldIndex,o.active.index)},L=function(e){o.settings.autoControlsCombine?o.controls.autoEl.html(o.controls[e]):(o.controls.autoEl.find("a").removeClass("active"),o.controls.autoEl.find("a:not(.bx-"+e+")").addClass("active"))},j=function(){1===v()?(o.controls.prev.addClass("disabled"),o.controls.next.addClass("disabled")):!o.settings.infiniteLoop&&o.settings.hideControlOnEnd&&(0===o.active.index?(o.controls.prev.addClass("disabled"),o.controls.next.removeClass("disabled")):o.active.index===v()-1?(o.controls.next.addClass("disabled"),o.controls.prev.removeClass("disabled")):(o.controls.prev.removeClass("disabled"),o.controls.next.removeClass("disabled")))},I=function(){if(o.settings.autoDelay>0){setTimeout(r.startAuto,o.settings.autoDelay)}else r.startAuto(),e(window).focus(function(){r.startAuto()}).blur(function(){r.stopAuto()});o.settings.autoHover&&r.hover(function(){o.interval&&(r.stopAuto(!0),o.autoPaused=!0)},function(){o.autoPaused&&(r.startAuto(!0),o.autoPaused=null)})},N=function(){var t,n,i,s,a,l,c,u,d=0;"next"===o.settings.autoDirection?r.append(o.children.clone().addClass("bx-clone")):(r.prepend(o.children.clone().addClass("bx-clone")),t=o.children.first().position(),d="horizontal"===o.settings.mode?-t.left:-t.top),b(d,"reset",0),o.settings.pager=!1,o.settings.controls=!1,o.settings.autoControls=!1,o.settings.tickerHover&&(o.usingCSS?(s="horizontal"===o.settings.mode?4:5,o.viewport.hover(function(){n=r.css("-"+o.cssPrefix+"-transform"),i=parseFloat(n.split(",")[s]),b(i,"reset",0)},function(){u=0,o.children.each(function(t){u+="horizontal"===o.settings.mode?e(this).outerWidth(!0):e(this).outerHeight(!0)}),a=o.settings.speed/u,l="horizontal"===o.settings.mode?"left":"top",c=a*(u-Math.abs(parseInt(i))),q(c)})):o.viewport.hover(function(){r.stop()},function(){u=0,o.children.each(function(t){u+="horizontal"===o.settings.mode?e(this).outerWidth(!0):e(this).outerHeight(!0)}),a=o.settings.speed/u,l="horizontal"===o.settings.mode?"left":"top",c=a*(u-Math.abs(parseInt(r.css(l)))),q(c)})),q()},q=function(e){var t,n,i,s=e?e:o.settings.speed,a={left:0,top:0},l={left:0,top:0};"next"===o.settings.autoDirection?a=r.find(".bx-clone").first().position():l=o.children.first().position(),t="horizontal"===o.settings.mode?-a.left:-a.top,n="horizontal"===o.settings.mode?-l.left:-l.top,i={resetValue:n},b(t,"ticker",s,i)},F=function(t){var n=e(window),i={top:n.scrollTop(),left:n.scrollLeft()},o=t.offset();return i.right=i.left+n.width(),i.bottom=i.top+n.height(),o.right=o.left+t.outerWidth(),o.bottom=o.top+t.outerHeight(),!(i.right<o.left||i.left>o.right||i.bottom<o.top||i.top>o.bottom)},H=function(e){var t=document.activeElement.tagName.toLowerCase(),n="input|textarea",i=new RegExp(t,["i"]),o=i.exec(n);if(null==o&&F(r)){if(39===e.keyCode)return P(e),!1;if(37===e.keyCode)return $(e),!1}},O=function(){o.touch={start:{x:0,y:0},end:{x:0,y:0}},o.viewport.bind("touchstart MSPointerDown pointerdown",R),o.viewport.on("click",".bxslider a",function(e){o.viewport.hasClass("click-disabled")&&(e.preventDefault(),o.viewport.removeClass("click-disabled"))})},R=function(e){if(o.controls.el.addClass("disabled"),o.working)e.preventDefault(),o.controls.el.removeClass("disabled");else{o.touch.originalPos=r.position();var t=e.originalEvent,n="undefined"!=typeof t.changedTouches?t.changedTouches:[t];o.touch.start.x=n[0].pageX,o.touch.start.y=n[0].pageY,o.viewport.get(0).setPointerCapture&&(o.pointerId=t.pointerId,o.viewport.get(0).setPointerCapture(o.pointerId)),o.viewport.bind("touchmove MSPointerMove pointermove",z),o.viewport.bind("touchend MSPointerUp pointerup",B),o.viewport.bind("MSPointerCancel pointercancel",W)}},W=function(e){b(o.touch.originalPos.left,"reset",0),o.controls.el.removeClass("disabled"),o.viewport.unbind("MSPointerCancel pointercancel",W),o.viewport.unbind("touchmove MSPointerMove pointermove",z),o.viewport.unbind("touchend MSPointerUp pointerup",B),o.viewport.get(0).releasePointerCapture&&o.viewport.get(0).releasePointerCapture(o.pointerId)},z=function(e){var t=e.originalEvent,n="undefined"!=typeof t.changedTouches?t.changedTouches:[t],i=Math.abs(n[0].pageX-o.touch.start.x),r=Math.abs(n[0].pageY-o.touch.start.y),s=0,a=0;3*i>r&&o.settings.preventDefaultSwipeX?e.preventDefault():3*r>i&&o.settings.preventDefaultSwipeY&&e.preventDefault(),"fade"!==o.settings.mode&&o.settings.oneToOneTouch&&("horizontal"===o.settings.mode?(a=n[0].pageX-o.touch.start.x,s=o.touch.originalPos.left+a):(a=n[0].pageY-o.touch.start.y,s=o.touch.originalPos.top+a),b(s,"reset",0))},B=function(e){o.viewport.unbind("touchmove MSPointerMove pointermove",z),o.controls.el.removeClass("disabled");var t=e.originalEvent,n="undefined"!=typeof t.changedTouches?t.changedTouches:[t],i=0,s=0;o.touch.end.x=n[0].pageX,o.touch.end.y=n[0].pageY,"fade"===o.settings.mode?(s=Math.abs(o.touch.start.x-o.touch.end.x),s>=o.settings.swipeThreshold&&(o.touch.start.x>o.touch.end.x?r.goToNextSlide():r.goToPrevSlide(),r.stopAuto())):("horizontal"===o.settings.mode?(s=o.touch.end.x-o.touch.start.x,i=o.touch.originalPos.left):(s=o.touch.end.y-o.touch.start.y,i=o.touch.originalPos.top),!o.settings.infiniteLoop&&(0===o.active.index&&s>0||o.active.last&&s<0)?b(i,"reset",200):Math.abs(s)>=o.settings.swipeThreshold?(s<0?r.goToNextSlide():r.goToPrevSlide(),r.stopAuto()):b(i,"reset",200)),o.viewport.unbind("touchend MSPointerUp pointerup",B),o.viewport.get(0).releasePointerCapture&&o.viewport.get(0).releasePointerCapture(o.pointerId)},X=function(t){if(o.initialized)if(o.working)window.setTimeout(X,10);else{var n=e(window).width(),i=e(window).height();s===n&&a===i||(s=n,a=i,r.redrawSlider(),o.settings.onSliderResize.call(r,o.active.index))}},Y=function(e){var t=g();o.settings.ariaHidden&&!o.settings.ticker&&(o.children.attr("aria-hidden","true"),o.children.slice(e,e+t).attr("aria-hidden","false"))},_=function(e){return e<0?o.settings.infiniteLoop?v()-1:o.active.index:e>=v()?o.settings.infiniteLoop?0:o.active.index:e};return r.goToSlide=function(t,n){var i,s,a,l,c=!0,u=0,d={left:0,top:0},p=null;if(o.oldIndex=o.active.index,o.active.index=_(t),!o.working&&o.active.index!==o.oldIndex){if(o.working=!0,c=o.settings.onSlideBefore.call(r,o.children.eq(o.active.index),o.oldIndex,o.active.index),"undefined"!=typeof c&&!c)return o.active.index=o.oldIndex,void(o.working=!1);"next"===n?o.settings.onSlideNext.call(r,o.children.eq(o.active.index),o.oldIndex,o.active.index)||(c=!1):"prev"===n&&(o.settings.onSlidePrev.call(r,o.children.eq(o.active.index),o.oldIndex,o.active.index)||(c=!1)),o.active.last=o.active.index>=v()-1,(o.settings.pager||o.settings.pagerCustom)&&D(o.active.index),o.settings.controls&&j(),"fade"===o.settings.mode?(o.settings.adaptiveHeight&&o.viewport.height()!==f()&&o.viewport.animate({height:f()},o.settings.adaptiveHeightSpeed),o.children.filter(":visible").fadeOut(o.settings.speed).css({zIndex:0}),o.children.eq(o.active.index).css("zIndex",o.settings.slideZIndex+1).fadeIn(o.settings.speed,function(){e(this).css("zIndex",o.settings.slideZIndex),M()})):(o.settings.adaptiveHeight&&o.viewport.height()!==f()&&o.viewport.animate({height:f()},o.settings.adaptiveHeightSpeed),!o.settings.infiniteLoop&&o.carousel&&o.active.last?"horizontal"===o.settings.mode?(p=o.children.eq(o.children.length-1),d=p.position(),u=o.viewport.width()-p.outerWidth()):(i=o.children.length-o.settings.minSlides,d=o.children.eq(i).position()):o.carousel&&o.active.last&&"prev"===n?(s=1===o.settings.moveSlides?o.settings.maxSlides-m():(v()-1)*m()-(o.children.length-o.settings.maxSlides),p=r.children(".bx-clone").eq(s),d=p.position()):"next"===n&&0===o.active.index?(d=r.find("> .bx-clone").eq(o.settings.maxSlides).position(),o.active.last=!1):t>=0&&(l=t*parseInt(m()),d=o.children.eq(l).position()),"undefined"!=typeof d?(a="horizontal"===o.settings.mode?-(d.left-u):-d.top,b(a,"slide",o.settings.speed)):o.working=!1),o.settings.ariaHidden&&Y(o.active.index*m())}},r.goToNextSlide=function(){if(o.settings.infiniteLoop||!o.active.last){var e=parseInt(o.active.index)+1;r.goToSlide(e,"next")}},r.goToPrevSlide=function(){if(o.settings.infiniteLoop||0!==o.active.index){var e=parseInt(o.active.index)-1;r.goToSlide(e,"prev")}},r.startAuto=function(e){o.interval||(o.interval=setInterval(function(){"next"===o.settings.autoDirection?r.goToNextSlide():r.goToPrevSlide()},o.settings.pause),o.settings.autoControls&&e!==!0&&L("stop"))},r.stopAuto=function(e){o.interval&&(clearInterval(o.interval),o.interval=null,o.settings.autoControls&&e!==!0&&L("start"))},r.getCurrentSlide=function(){return o.active.index},r.getCurrentSlideElement=function(){return o.children.eq(o.active.index)},r.getSlideElement=function(e){return o.children.eq(e)},r.getSlideCount=function(){return o.children.length},r.isWorking=function(){return o.working},r.redrawSlider=function(){o.children.add(r.find(".bx-clone")).outerWidth(h()),o.viewport.css("height",f()),o.settings.ticker||y(),o.active.last&&(o.active.index=v()-1),o.active.index>=v()&&(o.active.last=!0),o.settings.pager&&!o.settings.pagerCustom&&(x(),D(o.active.index)),o.settings.ariaHidden&&Y(o.active.index*m())},r.destroySlider=function(){o.initialized&&(o.initialized=!1,e(".bx-clone",this).remove(),o.children.each(function(){void 0!==e(this).data("origStyle")?e(this).attr("style",e(this).data("origStyle")):e(this).removeAttr("style")}),void 0!==e(this).data("origStyle")?this.attr("style",e(this).data("origStyle")):e(this).removeAttr("style"),e(this).unwrap().unwrap(),o.controls.el&&o.controls.el.remove(),o.controls.next&&o.controls.next.remove(),o.controls.prev&&o.controls.prev.remove(),o.pagerEl&&o.settings.controls&&!o.settings.pagerCustom&&o.pagerEl.remove(),e(".bx-caption",this).remove(),o.controls.autoEl&&o.controls.autoEl.remove(),clearInterval(o.interval),o.settings.responsive&&e(window).unbind("resize",X),o.settings.keyboardEnabled&&e(document).unbind("keydown",H),e(this).removeData("bxSlider"))},r.reloadSlider=function(t){void 0!==t&&(n=t),r.destroySlider(),l(),e(r).data("bxSlider",this)},l(),e(r).data("bxSlider",this),this}}}(jQuery),function(e,t,n,i){"use strict";function o(e){var t=e.currentTarget,i=e.data?e.data.options:{},o=e.data?e.data.items:[],r="",s=0;e.preventDefault(),e.stopPropagation(),n(t).attr("data-fancybox")&&(r=n(t).data("fancybox")),r?(o=o.length?o.filter('[data-fancybox="'+r+'"]'):n("[data-fancybox="+r+"]"),s=o.index(t)):o=[t],n.fancybox.open(o,i,s)}if(!n)return i;var r={speed:330,loop:!0,opacity:"auto",margin:[44,0],gutter:30,infobar:!0,buttons:!0,slideShow:!0,fullScreen:!0,thumbs:!0,closeBtn:!0,smallBtn:"auto",image:{preload:"auto",protect:!1},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen allowtransparency="true" src=""></iframe>',preload:!0,scrolling:"no",css:{}},baseClass:"",slideClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-controls"><div class="fancybox-infobar"><button data-fancybox-previous class="fancybox-button fancybox-button--left" title="Previous"></button><div class="fancybox-infobar__body"><span class="js-fancybox-index"></span>&nbsp;/&nbsp;<span class="js-fancybox-count"></span></div><button data-fancybox-next class="fancybox-button fancybox-button--right" title="Next"></button></div><div class="fancybox-buttons"><button data-fancybox-close class="fancybox-button fancybox-button--close" title="Close (Esc)"></button></div></div><div class="fancybox-slider-wrap"><div class="fancybox-slider"></div></div><div class="fancybox-caption-wrap"><div class="fancybox-caption"></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>The requested content cannot be loaded. <br /> Please try again later.<p></div>',closeTpl:'<button data-fancybox-close class="fancybox-close-small">×</button>',parentEl:"body",touch:!0,keyboard:!0,focus:!0,closeClickOutside:!0,beforeLoad:n.noop,afterLoad:n.noop,beforeMove:n.noop,afterMove:n.noop,onComplete:n.noop,onInit:n.noop,beforeClose:n.noop,afterClose:n.noop,onActivate:n.noop,onDeactivate:n.noop},s=n(e),a=n(t),l=0,c=function(e){return e&&e.hasOwnProperty&&e instanceof n},u=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||function(t){e.setTimeout(t,1e3/60)}}(),d=function(i){var o;return"function"==typeof n&&i instanceof n&&(i=i[0]),o=i.getBoundingClientRect(),o.bottom>0&&o.right>0&&o.left<(e.innerWidth||t.documentElement.clientWidth)&&o.top<(e.innerHeight||t.documentElement.clientHeight)},f=function(e,i,o){var s=this;s.opts=n.extend(!0,{index:o},r,i||{}),s.id=s.opts.id||++l,s.group=[],s.currIndex=parseInt(s.opts.index,10)||0,s.prevIndex=null,s.prevPos=null,s.currPos=0,s.firstRun=null,s.createGroup(e),s.group.length&&(s.$lastFocus=n(t.activeElement).blur(),s.slides={},s.init(e))};n.extend(f.prototype,{init:function(){var e,t,i=this;i.scrollTop=s.scrollTop(),i.scrollLeft=s.scrollLeft(),n.fancybox.isTouch||n("html").hasClass("fancybox-enabled")||(e=n("body").width(),n("html").addClass("fancybox-enabled"),e=n("body").width()-e,e>1&&n('<style id="fancybox-noscroll" type="text/css">').html(".compensate-for-scrollbar, .fancybox-enabled body { margin-right: "+e+"px; }").appendTo("head")),t=n(i.opts.baseTpl).attr("id","fancybox-container-"+i.id).data("FancyBox",i).addClass(i.opts.baseClass).hide().prependTo(i.opts.parentEl),i.$refs={container:t,bg:t.find(".fancybox-bg"),controls:t.find(".fancybox-controls"),buttons:t.find(".fancybox-buttons"),slider_wrap:t.find(".fancybox-slider-wrap"),slider:t.find(".fancybox-slider"),caption:t.find(".fancybox-caption")},i.trigger("onInit"),i.activate(),i.current||i.jumpTo(i.currIndex)},createGroup:function(e){var t=this,o=n.makeArray(e);n.each(o,function(e,o){var r,s,a,l,c={},u={},d=[];n.isPlainObject(o)?(c=o,u=o.opts||{}):"object"===n.type(o)&&n(o).length?(r=n(o),d=r.data(),u="options"in d?d.options:{},u="object"===n.type(u)?u:{},c.type="type"in d?d.type:u.type,c.src="src"in d?d.src:u.src||r.attr("href"),u.width="width"in d?d.width:u.width,u.height="height"in d?d.height:u.height,u.thumb="thumb"in d?d.thumb:u.thumb,u.selector="selector"in d?d.selector:u.selector,"srcset"in d&&(u.image={srcset:d.srcset}),u.$orig=r):c={type:"html",content:o+""},c.opts=n.extend(!0,{},t.opts,u),s=c.type,a=c.src||"",s||(c.content?s="html":a.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?s="image":a.match(/\.(pdf)((\?|#).*)?$/i)?s="pdf":"#"===a.charAt(0)&&(s="inline"),c.type=s),c.index=t.group.length,c.opts.$orig&&!c.opts.$orig.length&&delete c.opts.$orig,!c.opts.$thumb&&c.opts.$orig&&(c.opts.$thumb=c.opts.$orig.find("img:first")),c.opts.$thumb&&!c.opts.$thumb.length&&delete c.opts.$thumb,"function"===n.type(c.opts.caption)?c.opts.caption=c.opts.caption.apply(o,[t,c]):"caption"in d?c.opts.caption=d.caption:u.$orig&&(c.opts.caption=r.attr("title")),c.opts.caption=c.opts.caption===i?"":c.opts.caption+"","ajax"===s&&(l=a.split(/\s+/,2),l.length>1&&(c.src=l.shift(),c.opts.selector=l.shift())),"auto"==c.opts.smallBtn&&(n.inArray(s,["html","inline","ajax"])>-1?(c.opts.buttons=!1,c.opts.smallBtn=!0):c.opts.smallBtn=!1),"pdf"===s&&(c.type="iframe",c.opts.closeBtn=!0,c.opts.smallBtn=!1,c.opts.iframe.preload=!1),c.opts.modal&&n.extend(!0,c.opts,{infobar:0,buttons:0,keyboard:0,slideShow:0,fullScreen:0,closeClickOutside:0}),t.group.push(c)})},addEvents:function(){var i=this,o=function(){s.scrollTop(i.scrollTop).scrollLeft(i.scrollLeft),i.$refs.slider_wrap.show(),i.update()};i.removeEvents(),i.$refs.container.on("click.fb-close","[data-fancybox-close]",function(e){e.stopPropagation(),e.preventDefault(),i.close(e)}).on("click.fb-previous","[data-fancybox-previous]",function(e){e.stopPropagation(),e.preventDefault(),i.previous()}).on("click.fb-next","[data-fancybox-next]",function(e){e.stopPropagation(),e.preventDefault(),i.next()}),n(e).on("orientationchange.fb resize.fb",function(e){u(function(){e&&e.originalEvent&&"orientationchange"==e.originalEvent.type?(i.$refs.slider_wrap.hide(),u(o)):o()})}),a.on("focusin.fb",function(e){var t=n.fancybox?n.fancybox.getInstance():null;!t||n(e.target).hasClass("fancybox-container")||n.contains(t.$refs.container[0],e.target)||(e.stopPropagation(),t.focus(),s.scrollTop(i.scrollTop).scrollLeft(i.scrollLeft))}),n(t).on("keydown.fb",function(e){var t=i.current,o=e.keyCode||e.which;if(t&&t.opts.keyboard&&!n(e.target).is("input")&&!n(e.target).is("textarea")){if(8===o||27===o)return e.preventDefault(),void i.close(e);switch(o){case 37:case 38:e.preventDefault(),i.previous();break;case 39:case 40:e.preventDefault(),i.next();break;case 80:case 32:e.preventDefault(),i.SlideShow&&(e.preventDefault(),i.SlideShow.toggle());break;case 70:i.FullScreen&&(e.preventDefault(),i.FullScreen.toggle());break;case 71:i.Thumbs&&(e.preventDefault(),i.Thumbs.toggle())}}})},removeEvents:function(){s.off("scroll.fb resize.fb orientationchange.fb"),a.off("keydown.fb focusin.fb click.fb-close"),this.$refs.container.off("click.fb-close click.fb-previous click.fb-next")},previous:function(e){this.jumpTo(this.currIndex-1,e)},next:function(e){this.jumpTo(this.currIndex+1,e)},jumpTo:function(e,t){var n,o,r,s,a=this;if(n=a.firstRun=null===a.firstRun,o=r=e=parseInt(e,10),s=!!a.current&&a.current.opts.loop,!a.isAnimating&&(o!=a.currIndex||n)){if(a.group.length>1&&s)o%=a.group.length,o=o<0?a.group.length+o:o,2==a.group.length?r=e-a.currIndex+a.currPos:(r=o-a.currIndex+a.currPos,Math.abs(a.currPos-(r+a.group.length))<Math.abs(a.currPos-r)?r+=a.group.length:Math.abs(a.currPos-(r-a.group.length))<Math.abs(a.currPos-r)&&(r-=a.group.length));else if(!a.group[o])return void a.update(!1,!1,t);a.current&&(a.current.$slide.removeClass("fancybox-slide--current fancybox-slide--complete"),a.updateSlide(a.current,!0)),a.prevIndex=a.currIndex,a.prevPos=a.currPos,a.currIndex=o,a.currPos=r,a.current=a.createSlide(r),a.group.length>1&&((a.opts.loop||r-1>=0)&&a.createSlide(r-1),(a.opts.loop||r+1<a.group.length)&&a.createSlide(r+1)),a.current.isMoved=!1,a.current.isComplete=!1,t=parseInt(t===i?1.5*a.current.opts.speed:t,10),a.trigger("beforeMove"),a.updateControls(),n&&(a.current.$slide.addClass("fancybox-slide--current"),a.$refs.container.show(),u(function(){a.$refs.bg.css("transition-duration",a.current.opts.speed+"ms"),a.$refs.container.addClass("fancybox-container--ready")})),a.update(!0,!1,n?0:t,function(){a.afterMove()}),a.loadSlide(a.current),n&&a.current.$ghost||a.preload()}},createSlide:function(e){var t,i,o,r=this;if(i=e%r.group.length,i=i<0?r.group.length+i:i,!r.slides[e]&&r.group[i]){if(r.opts.loop&&r.group.length>2)for(var s in r.slides)if(r.slides[s].index===i)return o=r.slides[s],o.pos=e,r.slides[e]=o,delete r.slides[s],r.updateSlide(o),o;t=n('<div class="fancybox-slide"></div>').appendTo(r.$refs.slider),r.slides[e]=n.extend(!0,{},r.group[i],{pos:e,$slide:t,isMoved:!1,isLoaded:!1})}return r.slides[e]},zoomInOut:function(e,t,i){var o,r,s,a=this,l=a.current,c=l.$placeholder,f=l.opts.opacity,p=l.opts.$thumb,h=p?p.offset():0,g=l.$slide.offset();return!!(c&&l.isMoved&&h&&d(p))&&(!("In"===e&&!a.firstRun)&&(n.fancybox.stop(c),a.isAnimating=!0,o={top:h.top-g.top+parseFloat(p.css("border-top-width")||0),left:h.left-g.left+parseFloat(p.css("border-left-width")||0),width:p.width(),height:p.height(),scaleX:1,scaleY:1},"auto"==f&&(f=Math.abs(l.width/l.height-o.width/o.height)>.1),"In"===e?(r=o,s=a.getFitPos(l),s.scaleX=s.width/r.width,s.scaleY=s.height/r.height,f&&(r.opacity=.1,s.opacity=1)):(r=n.fancybox.getTranslate(c),s=o,l.$ghost&&(l.$ghost.show(),l.$image&&l.$image.remove()),r.scaleX=r.width/s.width,r.scaleY=r.height/s.height,r.width=s.width,r.height=s.height,f&&(s.opacity=0)),a.updateCursor(s.width,s.height),delete s.width,delete s.height,n.fancybox.setTranslate(c,r),c.show(),a.trigger("beforeZoom"+e),u(function(){c.css("transition","all "+t+"ms"),n.fancybox.setTranslate(c,s),setTimeout(function(){u(function(){var t;c.css("transition","none"),t=n.fancybox.getTranslate(c),t.scaleX=1,t.scaleY=1,n.fancybox.setTranslate(c,t),a.trigger("afterZoom"+e),i.apply(a),a.isAnimating=!1})},t)}),!0))},canPan:function(){var e=this,t=e.current,n=t.$placeholder,i=!1;return n&&(i=e.getFitPos(t),i=Math.abs(n.width()-i.width)>1||Math.abs(n.height()-i.height)>1),i},isScaledDown:function(){var e=this,t=e.current,i=t.$placeholder,o=!1;return i&&(o=n.fancybox.getTranslate(i),o=o.width<t.width||o.height<t.height),o},scaleToActual:function(e,t,o){var r,s,a,l,c,u=this,d=u.current,f=d.$placeholder,p=parseInt(d.$slide.width(),10),h=parseInt(d.$slide.height(),10),g=d.width,v=d.height;f&&(u.isAnimating=!0,e=e===i?.5*p:e,t=t===i?.5*h:t,r=n.fancybox.getTranslate(f),l=g/r.width,c=v/r.height,s=.5*p-.5*g,a=.5*h-.5*v,g>p&&(s=r.left*l-(e*l-e),s>0&&(s=0),s<p-g&&(s=p-g)),v>h&&(a=r.top*c-(t*c-t),a>0&&(a=0),a<h-v&&(a=h-v)),u.updateCursor(g,v),n.fancybox.animate(f,null,{top:a,left:s,scaleX:l,scaleY:c},o||d.opts.speed,function(){u.isAnimating=!1}))},scaleToFit:function(e){var t,i=this,o=i.current,r=o.$placeholder;r&&(i.isAnimating=!0,t=i.getFitPos(o),i.updateCursor(t.width,t.height),n.fancybox.animate(r,null,{top:t.top,left:t.left,scaleX:t.width/r.width(),scaleY:t.height/r.height()},e||o.opts.speed,function(){i.isAnimating=!1}))},getFitPos:function(e){var t,i,o,r,a,l,c,u=e.$placeholder||e.$content,d=e.width,f=e.height,p=e.opts.margin;return!(!u||!u.length||!d&&!f)&&("number"===n.type(p)&&(p=[p,p]),2==p.length&&(p=[p[0],p[1],p[0],p[1]]),s.width()<800&&(p=[0,0,0,0]),t=parseInt(e.$slide.width(),10)-(p[1]+p[3]),i=parseInt(e.$slide.height(),10)-(p[0]+p[2]),o=Math.min(1,t/d,i/f),l=Math.floor(o*d),c=Math.floor(o*f),r=Math.floor(.5*(i-c))+p[0],a=Math.floor(.5*(t-l))+p[3],{top:r,left:a,width:l,height:c})},update:function(e,t,i,o){var r=this,s=r.current.pos*Math.floor(r.current.$slide.width())*-1-r.current.pos*r.current.opts.gutter;r.isAnimating!==!0&&(i=parseInt(i,10)||0,n.fancybox.stop(r.$refs.slider),e===!1?r.updateSlide(r.current,t):n.each(r.slides,function(e,n){r.updateSlide(n,t)}),i?n.fancybox.animate(r.$refs.slider,null,{top:0,left:s},i,function(){r.current.isMoved=!0,"function"===n.type(o)&&o.apply(r)}):(n.fancybox.setTranslate(r.$refs.slider,{top:0,left:s}),r.current.isMoved=!0,"function"===n.type(o)&&o.apply(r)))},updateSlide:function(e,t){var i,o=this,r=e.$placeholder;e=e||o.current,e&&!o.isClosing&&(i=e.pos*Math.floor(e.$slide.width())+e.pos*e.opts.gutter,i!==e.leftPos&&(n.fancybox.setTranslate(e.$slide,{top:0,left:i}),e.leftPos=i),t!==!1&&r&&(n.fancybox.setTranslate(r,o.getFitPos(e)),e.pos===o.currPos&&o.updateCursor()),e.$slide.trigger("refresh"),o.trigger("onUpdate",e))},updateCursor:function(e,t){var n,o=this,r=o.$refs.container.removeClass("fancybox-controls--canzoomIn fancybox-controls--canzoomOut fancybox-controls--canGrab");!o.isClosing&&o.opts.touch&&(n=e!==i&&t!==i?e<o.current.width&&t<o.current.height:o.isScaledDown(),n?r.addClass("fancybox-controls--canzoomIn"):o.group.length<2?r.addClass("fancybox-controls--canzoomOut"):r.addClass("fancybox-controls--canGrab"))},loadSlide:function(e){var t,i,o,r=this;if(e&&!e.isLoaded&&!e.isLoading){switch(e.isLoading=!0,r.trigger("beforeLoad",e),t=e.type,i=e.$slide,i.off("refresh").trigger("onReset").addClass("fancybox-slide--"+(t||"unknown")).addClass(e.opts.slideClass),t){case"image":r.setImage(e);break;case"iframe":r.setIframe(e);break;case"html":r.setContent(e,e.content);break;case"inline":n(e.src).length?r.setContent(e,n(e.src)):r.setError(e);break;case"ajax":r.showLoading(e),o=n.ajax(n.extend({},e.opts.ajax.settings,{url:e.src,success:function(t,n){"success"===n&&r.setContent(e,t)},error:function(t,n){t&&"abort"!==n&&r.setError(e)}})),i.one("onReset",function(){o.abort()});break;default:r.setError(e)}return!0}},setImage:function(t){var i,o,r,s,a=this,l=t.opts.image.srcset;if(t.isLoaded&&!t.hasError)return void a.afterLoad(t);if(l){r=e.devicePixelRatio||1,s=e.innerWidth*r,o=l.split(",").map(function(e){var t={};return e.trim().split(/\s+/).forEach(function(e,n){var i=parseInt(e.substring(0,e.length-1),10);return 0===n?t.url=e:void(i&&(t.value=i,t.postfix=e[e.length-1]))}),t}),o.sort(function(e,t){return e.value-t.value});for(var c=0;c<o.length;c++){var u=o[c];if("w"===u.postfix&&u.value>=s||"x"===u.postfix&&u.value>=r){i=u;break}}!i&&o.length&&(i=o[o.length-1]),i&&(t.src=i.url,t.width&&t.height&&"w"==i.postfix&&(t.height=t.width/t.height*i.value,t.width=i.value))}t.$placeholder=n('<div class="fancybox-placeholder"></div>').hide().appendTo(t.$slide),t.opts.preload!==!1&&t.opts.width&&t.opts.height&&(t.opts.thumb||t.opts.$thumb)?(t.width=t.opts.width,t.height=t.opts.height,t.$ghost=n("<img />").one("load error",function(){a.isClosing||(n("<img/>")[0].src=t.src,a.revealImage(t,function(){a.setBigImage(t),a.firstRun&&t.index===a.currIndex&&a.preload()}))}).addClass("fancybox-image").appendTo(t.$placeholder).attr("src",t.opts.thumb||t.opts.$thumb.attr("src"))):a.setBigImage(t)},setBigImage:function(e){var t=this,i=n("<img />");e.$image=i.one("error",function(){t.setError(e)}).one("load",function(){clearTimeout(e.timouts),e.timouts=null,t.isClosing||(e.width=this.naturalWidth,e.height=this.naturalHeight,e.opts.image.srcset&&i.attr("sizes","100vw").attr("srcset",e.opts.image.srcset),t.afterLoad(e),e.$ghost&&(e.timouts=setTimeout(function(){e.$ghost.hide()},350)))}).addClass("fancybox-image").attr("src",e.src).appendTo(e.$placeholder),i[0].complete?i.trigger("load"):i[0].error?i.trigger("error"):e.timouts=setTimeout(function(){i[0].complete||e.hasError||t.showLoading(e)},150),e.opts.image.protect&&n('<div class="fancybox-spaceball"></div>').appendTo(e.$placeholder).on("contextmenu.fb",function(e){return 2==e.button&&e.preventDefault(),!0})},revealImage:function(e,t){var i=this;return t=t||n.noop,"image"!==e.type||e.hasError||e.isRevealed===!0?void t.apply(i):(e.isRevealed=!0,void(e.pos===i.currPos&&i.zoomInOut("In",e.opts.speed,t)||(e.$ghost&&!e.isLoaded&&i.updateSlide(e,!0),e.pos===i.currPos?n.fancybox.animate(e.$placeholder,{opacity:0},{opacity:1},300,t):e.$placeholder.show(),t.apply(i))))},setIframe:function(e){var t,o=this,r=e.opts.iframe,s=e.$slide;e.$content=n('<div class="fancybox-content"></div>').css(r.css).appendTo(s),t=n(r.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr("scrolling",n.fancybox.isTouch?"auto":r.scrolling).appendTo(e.$content),r.preload?(e.$content.addClass("fancybox-tmp"),o.showLoading(e),t.on("load.fb error.fb",function(t){this.isReady=1,e.$slide.trigger("refresh"),o.afterLoad(e)}),s.on("refresh.fb",function(){var n,o,s,a,l,c=e.$content;if(1===t[0].isReady){try{n=t.contents(),o=n.find("body")}catch(e){}o&&o.length&&(r.css.width===i||r.css.height===i)&&(s=t[0].contentWindow.document.documentElement.scrollWidth,a=Math.ceil(o.outerWidth(!0)+(c.width()-s)),l=Math.ceil(o.outerHeight(!0)),c.css({width:r.css.width===i?a+(c.outerWidth()-c.innerWidth()):r.css.width,height:r.css.height===i?l+(c.outerHeight()-c.innerHeight()):r.css.height})),c.removeClass("fancybox-tmp")}})):this.afterLoad(e),t.attr("src",e.src),e.opts.smallBtn&&e.$content.prepend(e.opts.closeTpl),s.one("onReset",function(){try{n(this).find("iframe").hide().attr("src","//about:blank")}catch(e){}n(this).empty(),e.isLoaded=!1})},setContent:function(e,t){var i=this;i.isClosing||(i.hideLoading(e),e.$slide.empty(),c(t)&&t.parent().length?(t.data("placeholder")&&t.parents(".fancybox-slide").trigger("onReset"),t.data({placeholder:n("<div></div>").hide().insertAfter(t)
}).css("display","inline-block")):("string"===n.type(t)&&(t=n("<div>").append(t).contents(),3===t[0].nodeType&&(t=n("<div>").html(t))),e.opts.selector&&(t=n("<div>").html(t).find(e.opts.selector))),e.$slide.one("onReset",function(){var i=c(t)?t.data("placeholder"):0;i&&(t.hide().replaceAll(i),t.data("placeholder",null)),e.hasError||(n(this).empty(),e.isLoaded=!1)}),e.$content=n(t).appendTo(e.$slide),e.opts.smallBtn===!0&&e.$content.find(".fancybox-close-small").remove().end().eq(0).append(e.opts.closeTpl),this.afterLoad(e))},setError:function(e){e.hasError=!0,this.setContent(e,e.opts.errorTpl)},showLoading:function(e){var t=this;e=e||t.current,e&&!e.$spinner&&(e.$spinner=n(t.opts.spinnerTpl).appendTo(e.$slide))},hideLoading:function(e){var t=this;e=e||t.current,e&&e.$spinner&&(e.$spinner.remove(),delete e.$spinner)},afterMove:function(){var e=this,t=e.current,i={};t&&(t.$slide.siblings().trigger("onReset"),n.each(e.slides,function(t,n){n.pos>=e.currPos-1&&n.pos<=e.currPos+1?i[n.pos]=n:n&&n.$slide.remove()}),e.slides=i,e.trigger("afterMove"),t.isLoaded&&e.complete())},afterLoad:function(e){var t=this;t.isClosing||(e.isLoading=!1,e.isLoaded=!0,t.trigger("afterLoad",e),t.hideLoading(e),e.$ghost||t.updateSlide(e,!0),e.index===t.currIndex&&e.isMoved?t.complete():e.$ghost||t.revealImage(e))},complete:function(){var e=this,t=e.current;e.revealImage(t,function(){t.isComplete=!0,t.$slide.addClass("fancybox-slide--complete"),e.updateCursor(),e.trigger("onComplete"),t.opts.focus&&"image"!==t.type&&"iframe"!==t.type&&e.focus()})},preload:function(){var e,t,n=this;n.group.length<2||(e=n.slides[n.currPos+1],t=n.slides[n.currPos-1],e&&"image"===e.type&&n.loadSlide(e),t&&"image"===t.type&&n.loadSlide(t))},focus:function(){var e,t=this.current;e=t&&t.isComplete?t.$slide.find('button,:input,[tabindex],a:not(".disabled")').filter(":visible:first"):null,e&&e.length||(e=this.$refs.container),e.focus(),this.$refs.slider_wrap.scrollLeft(0),t&&t.$slide.scrollTop(0)},activate:function(){var e=this;n(".fancybox-container").each(function(){var t=n(this).data("FancyBox");t&&t.uid!==e.uid&&!t.isClosing&&t.trigger("onDeactivate")}),e.current&&(e.$refs.container.index()>0&&e.$refs.container.prependTo(t.body),e.updateControls()),e.trigger("onActivate"),e.addEvents()},close:function(e){var t=this,i=t.current,o=i.opts.speed,r=n.proxy(function(){t.cleanUp(e)},this);return!t.isAnimating&&!t.isClosing&&void(t.trigger("beforeClose",e)!==!1&&(t.isClosing=!0,i.timouts&&clearTimeout(i.timouts),e!==!0&&n.fancybox.stop(t.$refs.slider),t.$refs.container.removeClass("fancybox-container--active").addClass("fancybox-container--closing"),i.$slide.removeClass("fancybox-slide--complete").siblings().remove(),i.isMoved||i.$slide.css("overflow","visible"),t.removeEvents(),t.hideLoading(i),t.hideControls(),t.updateCursor(),t.$refs.bg.css("transition-duration",o+"ms"),this.$refs.container.removeClass("fancybox-container--ready"),e===!0?setTimeout(r,o):t.zoomInOut("Out",o,r)||n.fancybox.animate(t.$refs.container,null,{opacity:0},o,"easeInSine",r)))},cleanUp:function(e){var t,i=this;i.$refs.slider.children().trigger("onReset"),i.$refs.container.empty().remove(),i.trigger("afterClose",e),i.current=null,t=n.fancybox.getInstance(),t?t.activate():(n("html").removeClass("fancybox-enabled"),n("#fancybox-noscroll").remove()),i.$lastFocus&&i.$lastFocus.focus()},trigger:function(e,t){var i,o=Array.prototype.slice.call(arguments,1),r=this,s=t&&t.opts?t:r.current;return s?o.unshift(s):s=r,o.unshift(r),n.isFunction(s.opts[e])&&(i=s.opts[e].apply(s,o)),i===!1?i:void r.$refs.container.trigger(e+".fb",o)},toggleControls:function(e){this.isHiddenControls?this.updateControls(e):this.hideControls()},hideControls:function(){this.isHiddenControls=!0,this.$refs.container.removeClass("fancybox-show-controls"),this.$refs.container.removeClass("fancybox-show-caption")},updateControls:function(e){var t=this,i=t.$refs.container,o=t.$refs.caption,r=t.current,s=r.index,a=r.opts,l=a.caption;this.isHiddenControls&&e!==!0||(this.isHiddenControls=!1,t.$refs.container.addClass("fancybox-show-controls"),i.toggleClass("fancybox-show-infobar",!!a.infobar&&t.group.length>1).toggleClass("fancybox-show-buttons",!!a.buttons).toggleClass("fancybox-is-modal",!!a.modal),n(".fancybox-button--left",i).toggleClass("fancybox-button--disabled",!a.loop&&s<=0),n(".fancybox-button--right",i).toggleClass("fancybox-button--disabled",!a.loop&&s>=t.group.length-1),n(".fancybox-button--play",i).toggle(!!(a.slideShow&&t.group.length>1)),n(".fancybox-button--close",i).toggle(!!a.closeBtn),n(".js-fancybox-count",i).html(t.group.length),n(".js-fancybox-index",i).html(s+1),r.$slide.trigger("refresh"),o&&o.empty(),l&&l.length?(o.html(l),this.$refs.container.addClass("fancybox-show-caption "),t.$caption=o):this.$refs.container.removeClass("fancybox-show-caption"))}}),n.fancybox={version:"3.0.39",defaults:r,getInstance:function(e){var t=n('.fancybox-container:not(".fancybox-container--closing"):first').data("FancyBox"),i=Array.prototype.slice.call(arguments,1);return t instanceof f&&("string"===n.type(e)?t[e].apply(t,i):"function"===n.type(e)&&e.apply(t,i),t)},open:function(e,t,n){return new f(e,t,n)},close:function(e){var t=this.getInstance();t&&(t.close(),e===!0&&this.close())},isTouch:t.createTouch!==i&&/Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent),use3d:function(){var n=t.createElement("div");return e.getComputedStyle(n).getPropertyValue("transform")&&!(t.documentMode&&t.documentMode<=11)}(),getTranslate:function(e){var t,n;return!(!e||!e.length)&&(t=e.get(0).getBoundingClientRect(),n=e.eq(0).css("transform"),n&&n.indexOf("matrix")!==-1?(n=n.split("(")[1],n=n.split(")")[0],n=n.split(",")):n=[],n.length?(n=n.length>10?[n[13],n[12],n[0],n[5]]:[n[5],n[4],n[0],n[3]],n=n.map(parseFloat)):n=[0,0,1,1],{top:n[0],left:n[1],scaleX:n[2],scaleY:n[3],opacity:parseFloat(e.css("opacity")),width:t.width,height:t.height})},setTranslate:function(e,t){var n="",o={};if(e&&t)return t.left===i&&t.top===i||(n=(t.left===i?e.position().top:t.left)+"px, "+(t.top===i?e.position().top:t.top)+"px",n=this.use3d?"translate3d("+n+", 0px)":"translate("+n+")"),t.scaleX!==i&&t.scaleY!==i&&(n=(n.length?n+" ":"")+"scale("+t.scaleX+", "+t.scaleY+")"),n.length&&(o.transform=n),t.opacity!==i&&(o.opacity=t.opacity),t.width!==i&&(o.width=t.width),t.height!==i&&(o.height=t.height),e.css(o)},easing:{easeOutCubic:function(e,t,n,i){return n*((e=e/i-1)*e*e+1)+t},easeInCubic:function(e,t,n,i){return n*(e/=i)*e*e+t},easeOutSine:function(e,t,n,i){return n*Math.sin(e/i*(Math.PI/2))+t},easeInSine:function(e,t,n,i){return-n*Math.cos(e/i*(Math.PI/2))+n+t}},stop:function(e){e.removeData("animateID")},animate:function(e,t,o,r,s,a){var l,c,d,f=this,p=null,h=0,g=function(){o.scaleX!==i&&o.scaleY!==i&&t&&t.width!==i&&t.height!==i&&(o.width=t.width*o.scaleX,o.height=t.height*o.scaleY,o.scaleX=1,o.scaleY=1),f.setTranslate(e,o),a()},v=function(n){if(l=[],c=0,e.length&&e.data("animateID")===d){if(n=n||Date.now(),p&&(c=n-p),p=n,h+=c,h>=r)return void g();for(var a in o)o.hasOwnProperty(a)&&t[a]!==i&&(t[a]==o[a]?l[a]=o[a]:l[a]=f.easing[s](h,t[a],o[a]-t[a],r));f.setTranslate(e,l),u(v)}};f.animateID=d=f.animateID===i?1:f.animateID+1,e.data("animateID",d),a===i&&"function"==n.type(s)&&(a=s,s=i),s||(s="easeOutCubic"),a=a||n.noop,t?this.setTranslate(e,t):t=this.getTranslate(e),r?(e.show(),u(v)):g()}},n.fn.fancybox=function(e){return this.off("click.fb-start").on("click.fb-start",{items:this,options:e||{}},o),this},n(t).on("click.fb-start","[data-fancybox]",o)}(window,document,window.jQuery),function(e){"use strict";var t=function(t,n,i){if(t)return i=i||"","object"===e.type(i)&&(i=e.param(i,!0)),e.each(n,function(e,n){t=t.replace("$"+e,n||"")}),i.length&&(t+=(t.indexOf("?")>0?"&":"?")+i),t},n={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"//www.youtube.com/embed/$4",thumb:"//img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1,api:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},metacafe:{matcher:/metacafe.com\/watch\/(\d+)\/(.*)?/,type:"iframe",url:"//www.metacafe.com/embed/$1/?ap=1"},dailymotion:{matcher:/dailymotion.com\/video\/(.*)\/?(.*)/,params:{additionalInfos:0,autoStart:1},type:"iframe",url:"//www.dailymotion.com/embed/video/$1"},vine:{matcher:/vine.co\/v\/([a-zA-Z0-9\?\=\-]+)/,type:"iframe",url:"//vine.co/v/$1/embed/simple"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},google_maps:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/?ll="+(e[9]?e[9]+"&z="+Math.floor(e[10])+(e[12]?e[12].replace(/^\//,"&"):""):e[12])+"&output="+(e[12]&&e[12].indexOf("layer=c")>0?"svembed":"embed")}}};e(document).on("onInit.fb",function(i,o){e.each(o.group,function(i,o){var r,s,a,l,c,u,d=o.src||"",f=!1;o.type||(e.each(n,function(n,i){if(s=d.match(i.matcher),c={},u=n,s){if(f=i.type,i.paramPlace&&s[i.paramPlace]){l=s[i.paramPlace],"?"==l[0]&&(l=l.substring(1)),l=l.split("&");for(var p=0;p<l.length;++p){var h=l[p].split("=",2);2==h.length&&(c[h[0]]=decodeURIComponent(h[1].replace(/\+/g," ")))}}return a=e.extend(!0,{},i.params,o.opts[n],c),d="function"===e.type(i.url)?i.url.call(this,s,a,o):t(i.url,s,a),r="function"===e.type(i.thumb)?i.thumb.call(this,s,a,o):t(i.thumb,s),"vimeo"===u&&(d=d.replace("&%23","#")),!1}}),f?(o.src=d,o.type=f,o.opts.thumb||o.opts.$thumb&&o.opts.$thumb.length||(o.opts.thumb=r),"iframe"===f&&(e.extend(!0,o.opts,{iframe:{preload:!1,scrolling:"no"},smallBtn:!1,closeBtn:!0,fullScreen:!1,slideShow:!1}),o.opts.slideClass+=" fancybox-slide--video")):o.type="iframe")})})}(window.jQuery),function(e,t,n){"use strict";var i=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||function(t){e.setTimeout(t,1e3/60)}}(),o=function(t){var n=[];t=t.originalEvent||t||e.e,t=t.touches&&t.touches.length?t.touches:t.changedTouches&&t.changedTouches.length?t.changedTouches:[t];for(var i in t)t[i].pageX?n.push({x:t[i].pageX,y:t[i].pageY}):t[i].clientX&&n.push({x:t[i].clientX,y:t[i].clientY});return n},r=function(e,t,n){return t&&e?"x"===n?e.x-t.x:"y"===n?e.y-t.y:Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)):0},s=function(e){return e.is("a")||e.is("button")||e.is("input")||e.is("select")||e.is("textarea")||n.isFunction(e.get(0).onclick)},a=function(t){var n=e.getComputedStyle(t)["overflow-y"],i=e.getComputedStyle(t)["overflow-x"],o=("scroll"===n||"auto"===n)&&t.scrollHeight>t.clientHeight,r=("scroll"===i||"auto"===i)&&t.scrollWidth>t.clientWidth;return o||r},l=function(e){for(var t=!1;;){if(t=a(e.get(0)))break;if(e=e.parent(),!e.length||e.hasClass("fancybox-slider")||e.is("body"))break}return t},c=function(e){var t=this;t.instance=e,t.$wrap=e.$refs.slider_wrap,t.$slider=e.$refs.slider,t.$container=e.$refs.container,t.destroy(),t.$wrap.on("touchstart.fb mousedown.fb",n.proxy(t,"ontouchstart"))};c.prototype.destroy=function(){this.$wrap.off("touchstart.fb mousedown.fb touchmove.fb mousemove.fb touchend.fb touchcancel.fb mouseup.fb mouseleave.fb")},c.prototype.ontouchstart=function(t){var i=this,a=n(t.target),c=i.instance,u=c.current,d=u.$content||u.$placeholder;return i.startPoints=o(t),i.$target=a,i.$content=d,i.canvasWidth=Math.round(u.$slide[0].clientWidth),i.canvasHeight=Math.round(u.$slide[0].clientHeight),i.startEvent=t,t.originalEvent.clientX>i.canvasWidth||(u.opts.touch?void(s(a)||s(a.parent())||l(a)&&!a.hasClass("fancybox-slide")||t.originalEvent&&2==t.originalEvent.button||(t.stopPropagation(),t.preventDefault(),!u||i.instance.isAnimating||i.instance.isClosing||!i.startPoints||i.startPoints.length>1&&!u.isMoved||(i.$wrap.off("touchmove.fb mousemove.fb",n.proxy(i,"ontouchmove")),i.$wrap.off("touchend.fb touchcancel.fb mouseup.fb mouseleave.fb",n.proxy(i,"ontouchend")),i.$wrap.on("touchend.fb touchcancel.fb mouseup.fb mouseleave.fb",n.proxy(i,"ontouchend")),i.$wrap.on("touchmove.fb mousemove.fb",n.proxy(i,"ontouchmove")),i.startTime=(new Date).getTime(),i.distanceX=i.distanceY=i.distance=0,i.canTap=!1,i.isPanning=!1,i.isSwiping=!1,i.isZooming=!1,i.sliderStartPos=n.fancybox.getTranslate(i.$slider),i.contentStartPos=n.fancybox.getTranslate(i.$content),i.contentLastPos=null,1!==i.startPoints.length||i.isZooming||(i.canTap=u.isMoved,"image"===u.type&&(i.contentStartPos.width>i.canvasWidth+1||i.contentStartPos.height>i.canvasHeight+1)?(n.fancybox.stop(i.$content),i.isPanning=!0):(n.fancybox.stop(i.$slider),i.isSwiping=!0),i.$container.addClass("fancybox-controls--isGrabbing")),2===i.startPoints.length&&u.isMoved&&!u.hasError&&"image"===u.type&&(u.isLoaded||u.$ghost)&&(i.isZooming=!0,i.isSwiping=!1,i.isPanning=!1,n.fancybox.stop(i.$content),i.centerPointStartX=.5*(i.startPoints[0].x+i.startPoints[1].x)-n(e).scrollLeft(),i.centerPointStartY=.5*(i.startPoints[0].y+i.startPoints[1].y)-n(e).scrollTop(),i.percentageOfImageAtPinchPointX=(i.centerPointStartX-i.contentStartPos.left)/i.contentStartPos.width,i.percentageOfImageAtPinchPointY=(i.centerPointStartY-i.contentStartPos.top)/i.contentStartPos.height,i.startDistanceBetweenFingers=r(i.startPoints[0],i.startPoints[1]))))):(i.endPoints=i.startPoints,i.ontap()))},c.prototype.ontouchmove=function(e){var t=this;e.preventDefault(),t.newPoints=o(e),t.newPoints&&t.newPoints.length&&(t.distanceX=r(t.newPoints[0],t.startPoints[0],"x"),t.distanceY=r(t.newPoints[0],t.startPoints[0],"y"),t.distance=r(t.newPoints[0],t.startPoints[0]),t.distance>0&&(t.isSwiping?t.onSwipe():t.isPanning?t.onPan():t.isZooming&&t.onZoom()))},c.prototype.onSwipe=function(){var t,o=this,r=o.isSwiping,s=o.sliderStartPos.left;r===!0?Math.abs(o.distance)>10&&(o.instance.group.length<2?o.isSwiping="y":!o.instance.current.isMoved||o.instance.opts.touch.vertical===!1||"auto"===o.instance.opts.touch.vertical&&n(e).width()>800?o.isSwiping="x":(t=Math.abs(180*Math.atan2(o.distanceY,o.distanceX)/Math.PI),o.isSwiping=t>45&&t<135?"y":"x"),o.canTap=!1,o.instance.current.isMoved=!1,o.startPoints=o.newPoints):("x"==r&&(!o.instance.current.opts.loop&&0===o.instance.current.index&&o.distanceX>0?s+=Math.pow(o.distanceX,.8):!o.instance.current.opts.loop&&o.instance.current.index===o.instance.group.length-1&&o.distanceX<0?s-=Math.pow(-o.distanceX,.8):s+=o.distanceX),o.sliderLastPos={top:"x"==r?0:o.sliderStartPos.top+o.distanceY,left:s},i(function(){n.fancybox.setTranslate(o.$slider,o.sliderLastPos)}))},c.prototype.onPan=function(){var e,t,o,r=this;r.canTap=!1,e=r.contentStartPos.width>r.canvasWidth?r.contentStartPos.left+r.distanceX:r.contentStartPos.left,t=r.contentStartPos.top+r.distanceY,o=r.limitMovement(e,t,r.contentStartPos.width,r.contentStartPos.height),o.scaleX=r.contentStartPos.scaleX,o.scaleY=r.contentStartPos.scaleY,r.contentLastPos=o,i(function(){n.fancybox.setTranslate(r.$content,r.contentLastPos)})},c.prototype.limitMovement=function(e,t,n,i){var o,r,s,a,l=this,c=l.canvasWidth,u=l.canvasHeight,d=l.contentStartPos.left,f=l.contentStartPos.top,p=l.distanceX,h=l.distanceY;return o=Math.max(0,.5*c-.5*n),r=Math.max(0,.5*u-.5*i),s=Math.min(c-n,.5*c-.5*n),a=Math.min(u-i,.5*u-.5*i),n>c&&(p>0&&e>o&&(e=o-1+Math.pow(-o+d+p,.8)||0),p<0&&e<s&&(e=s+1-Math.pow(s-d-p,.8)||0)),i>u&&(h>0&&t>r&&(t=r-1+Math.pow(-r+f+h,.8)||0),h<0&&t<a&&(t=a+1-Math.pow(a-f-h,.8)||0)),{top:t,left:e}},c.prototype.limitPosition=function(e,t,n,i){var o=this,r=o.canvasWidth,s=o.canvasHeight;return n>r?(e=e>0?0:e,e=e<r-n?r-n:e):e=Math.max(0,r/2-n/2),i>s?(t=t>0?0:t,t=t<s-i?s-i:t):t=Math.max(0,s/2-i/2),{top:t,left:e}},c.prototype.onZoom=function(){var t=this,o=t.contentStartPos.width,s=t.contentStartPos.height,a=t.contentStartPos.left,l=t.contentStartPos.top,c=r(t.newPoints[0],t.newPoints[1]),u=c/t.startDistanceBetweenFingers,d=Math.floor(o*u),f=Math.floor(s*u),p=(o-d)*t.percentageOfImageAtPinchPointX,h=(s-f)*t.percentageOfImageAtPinchPointY,g=(t.newPoints[0].x+t.newPoints[1].x)/2-n(e).scrollLeft(),v=(t.newPoints[0].y+t.newPoints[1].y)/2-n(e).scrollTop(),m=g-t.centerPointStartX,y=v-t.centerPointStartY,b=a+(p+m),x=l+(h+y),w={top:x,left:b,scaleX:t.contentStartPos.scaleX*u,scaleY:t.contentStartPos.scaleY*u};t.canTap=!1,t.newWidth=d,t.newHeight=f,t.contentLastPos=w,i(function(){n.fancybox.setTranslate(t.$content,t.contentLastPos)})},c.prototype.ontouchend=function(e){var t=this,i=t.instance.current,r=Math.max((new Date).getTime()-t.startTime,1),s=t.isSwiping,a=t.isPanning,l=t.isZooming;return t.endPoints=o(e),t.$container.removeClass("fancybox-controls--isGrabbing"),t.$wrap.off("touchmove.fb mousemove.fb",n.proxy(this,"ontouchmove")),t.$wrap.off("touchend.fb touchcancel.fb mouseup.fb mouseleave.fb",n.proxy(this,"ontouchend")),t.isSwiping=!1,t.isPanning=!1,t.isZooming=!1,t.canTap?t.ontap():(t.velocityX=t.distanceX/r*.5,t.velocityY=t.distanceY/r*.5,t.speed=i.opts.speed||330,t.speedX=Math.max(.75*t.speed,Math.min(1.5*t.speed,1/Math.abs(t.velocityX)*t.speed)),t.speedY=Math.max(.75*t.speed,Math.min(1.5*t.speed,1/Math.abs(t.velocityY)*t.speed)),void(a?t.endPanning():l?t.endZooming():t.endSwiping(s)))},c.prototype.endSwiping=function(e){var t=this;"y"==e&&Math.abs(t.distanceY)>50?(n.fancybox.animate(t.$slider,null,{top:t.sliderStartPos.top+t.distanceY+150*t.velocityY,left:t.sliderStartPos.left,opacity:0},t.speedY),t.instance.close(!0)):"x"==e&&t.distanceX>50?t.instance.previous(t.speedX):"x"==e&&t.distanceX<-50?t.instance.next(t.speedX):t.instance.update(!1,!0,150)},c.prototype.endPanning=function(){var e,t,i,o=this;o.contentLastPos&&(e=o.contentLastPos.left+o.velocityX*o.speed*2,t=o.contentLastPos.top+o.velocityY*o.speed*2,i=o.limitPosition(e,t,o.contentStartPos.width,o.contentStartPos.height),i.width=o.contentStartPos.width,i.height=o.contentStartPos.height,n.fancybox.animate(o.$content,null,i,o.speed,"easeOutSine"))},c.prototype.endZooming=function(){var e,t,i,o,r=this,s=r.instance.current,a=r.newWidth,l=r.newHeight;r.contentLastPos&&(e=r.contentLastPos.left,t=r.contentLastPos.top,o={top:t,left:e,width:a,height:l,scaleX:1,scaleY:1},n.fancybox.setTranslate(r.$content,o),a<r.canvasWidth&&l<r.canvasHeight?r.instance.scaleToFit(150):a>s.width||l>s.height?r.instance.scaleToActual(r.centerPointStartX,r.centerPointStartY,150):(i=r.limitPosition(e,t,a,l),n.fancybox.animate(r.$content,null,i,r.speed,"easeOutSine")))},c.prototype.ontap=function(){var e=this,t=e.instance,i=t.current,o=e.endPoints[0].x,r=e.endPoints[0].y;if(o-=e.$wrap.offset().left,r-=e.$wrap.offset().top,t.SlideShow&&t.SlideShow.isActive&&t.SlideShow.stop(),!n.fancybox.isTouch)return i.opts.closeClickOutside&&e.$target.is(".fancybox-slide")?void t.close(e.startEvent):void("image"==i.type&&i.isMoved&&(t.canPan()?t.scaleToFit():t.isScaledDown()?t.scaleToActual(o,r):t.group.length<2&&t.close(e.startEvent)));if(e.tapped){if(clearTimeout(e.tapped),e.tapped=null,Math.abs(o-e.x)>50||Math.abs(r-e.y)>50||!i.isMoved)return this;"image"==i.type&&(i.isLoaded||i.$ghost)&&(t.canPan()?t.scaleToFit():t.isScaledDown()&&t.scaleToActual(o,r))}else e.x=o,e.y=r,e.tapped=setTimeout(function(){e.tapped=null,t.toggleControls(!0)},300);return this},n(t).on("onActivate.fb",function(e,t){t.Guestures||(t.Guestures=new c(t))}),n(t).on("beforeClose.fb",function(e,t){t.Guestures&&t.Guestures.destroy()})}(window,document,window.jQuery),function(e,t){"use strict";var n=function(e){this.instance=e,this.init()};t.extend(n.prototype,{timer:null,isActive:!1,$button:null,speed:3e3,init:function(){var e=this;e.$button=t('<button data-fancybox-play class="fancybox-button fancybox-button--play" title="Slideshow (P)"></button>').appendTo(e.instance.$refs.buttons),e.instance.$refs.container.on("click","[data-fancybox-play]",function(){e.toggle()})},set:function(){var e=this;e.instance&&e.instance.current&&(e.instance.current.opts.loop||e.instance.currIndex<e.instance.group.length-1)?e.timer=setTimeout(function(){e.instance.next()},e.instance.current.opts.slideShow.speed||e.speed):e.stop()},clear:function(){var e=this;clearTimeout(e.timer),e.timer=null},start:function(){var e=this;e.stop(),e.instance&&e.instance.current&&(e.instance.current.opts.loop||e.instance.currIndex<e.instance.group.length-1)&&(e.instance.$refs.container.on({"beforeLoad.fb.player":t.proxy(e,"clear"),"onComplete.fb.player":t.proxy(e,"set")}),e.isActive=!0,e.instance.current.isComplete&&e.set(),e.instance.$refs.container.trigger("onPlayStart"),e.$button.addClass("fancybox-button--pause"))},stop:function(){var e=this;e.clear(),e.instance.$refs.container.trigger("onPlayEnd").off(".player"),e.$button.removeClass("fancybox-button--pause"),e.isActive=!1},toggle:function(){var e=this;e.isActive?e.stop():e.start()}}),t(e).on("onInit.fb",function(e,t){t.opts.slideShow&&!t.SlideShow&&t.group.length>1&&(t.SlideShow=new n(t))}),t(e).on("beforeClose.fb onDeactivate.fb",function(e,t){t.SlideShow&&t.SlideShow.stop()})}(document,window.jQuery),function(e,t){"use strict";var n=function(e){this.instance=e,this.init()};t.extend(n.prototype,{$button:null,init:function(){var n=this;n.isAvailable()&&(n.$button=t('<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fullscreen" title="Full screen (F)"></button>').appendTo(n.instance.$refs.buttons),n.instance.$refs.container.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(e){e.stopPropagation(),e.preventDefault(),n.toggle()}),t(e).on("onUpdate.fb",function(e,t){n.$button.toggle(!!t.current.opts.fullScreen),n.$button.toggleClass("fancybox-button-shrink",n.isActivated())}),t(e).on("afterClose.fb",function(){n.exit()}))},isAvailable:function(){var e=this.instance.$refs.container.get(0);return!!(e.requestFullscreen||e.msRequestFullscreen||e.mozRequestFullScreen||e.webkitRequestFullscreen)},isActivated:function(){return!!(e.fullscreenElement||e.mozFullScreenElement||e.webkitFullscreenElement||e.msFullscreenElement)},launch:function(){var e=this.instance.$refs.container.get(0);e&&!this.instance.isClosing&&(e.requestFullscreen?e.requestFullscreen():e.msRequestFullscreen?e.msRequestFullscreen():e.mozRequestFullScreen?e.mozRequestFullScreen():e.webkitRequestFullscreen&&e.webkitRequestFullscreen(e.ALLOW_KEYBOARD_INPUT))},exit:function(){e.exitFullscreen?e.exitFullscreen():e.msExitFullscreen?e.msExitFullscreen():e.mozCancelFullScreen?e.mozCancelFullScreen():e.webkitExitFullscreen&&e.webkitExitFullscreen()},toggle:function(){this.isActivated()?this.exit():this.isAvailable()&&this.launch()}}),t(e).on("onInit.fb",function(e,t){t.opts.fullScreen&&!t.FullScreen&&(t.FullScreen=new n(t))})}(document,window.jQuery),function(e,t){"use strict";var n=function(e){this.instance=e,this.init()};t.extend(n.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,init:function(){var e=this;e.$button=t('<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="Thumbnails (G)"></button>').appendTo(this.instance.$refs.buttons).on("touchend click",function(t){t.stopPropagation(),t.preventDefault(),e.toggle()})},create:function(){var e,n,i=this.instance;this.$grid=t('<div class="fancybox-thumbs"></div>').appendTo(i.$refs.container),e="<ul>",t.each(i.group,function(t,i){n=i.opts.thumb||(i.opts.$thumb?i.opts.$thumb.attr("src"):null),n||"image"!==i.type||(n=i.src),n&&n.length&&(e+='<li data-index="'+t+'"  tabindex="0" class="fancybox-thumbs-loading"><img data-src="'+n+'" /></li>')}),e+="</ul>",this.$list=t(e).appendTo(this.$grid).on("click touchstart","li",function(){i.jumpTo(t(this).data("index"))}),this.$list.find("img").hide().one("load",function(){var e,n,i,o,r=t(this).parent().removeClass("fancybox-thumbs-loading"),s=r.outerWidth(),a=r.outerHeight();e=this.naturalWidth||this.width,n=this.naturalHeight||this.height,i=e/s,o=n/a,i>=1&&o>=1&&(i>o?(e/=o,n=a):(e=s,n/=i)),t(this).css({width:Math.floor(e),height:Math.floor(n),"margin-top":Math.min(0,Math.floor(.3*a-.3*n)),"margin-left":Math.min(0,Math.floor(.5*s-.5*e))}).show()}).each(function(){this.src=t(this).data("src")})},focus:function(){this.instance.current&&this.$list.children().removeClass("fancybox-thumbs-active").filter('[data-index="'+this.instance.current.index+'"]').addClass("fancybox-thumbs-active").focus()},close:function(){this.$grid.hide()},update:function(){this.instance.$refs.container.toggleClass("fancybox-container--thumbs",this.isVisible),this.isVisible?(this.$grid||this.create(),this.$grid.show(),this.focus()):this.$grid&&this.$grid.hide(),this.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible?this.hide():this.show()}}),t(e).on("onInit.fb",function(e,t){var i=t.group[0],o=t.group[1];t.opts.thumbs&&!t.Thumbs&&t.group.length>1&&("image"==i.type||i.opts.thumb||i.opts.$thumb)&&("image"==o.type||o.opts.thumb||o.opts.$thumb)&&(t.Thumbs=new n(t))}),t(e).on("beforeMove.fb",function(e,t,n){var i=t.Thumbs;i&&(n.modal?(i.$button.hide(),i.hide()):(t.opts.thumbs.showOnStart===!0&&t.firstRun&&i.show(),i.$button.show(),i.isVisible&&i.focus()))}),t(e).on("beforeClose.fb",function(e,t){t.Thumbs&&t.Thumbs.isVisible&&t.opts.thumbs.hideOnClosing!==!1&&t.Thumbs.close(),t.Thumbs=null})}(document,window.jQuery),$(document).ready(function(){$("[data-toggle]").toggler()}),function(){$(".js-header-slider").each(function(){var e=$(this).bxSlider({infiniteLoop:!0,pager:!1,controls:!1});$(".js-header-slider-next").click(function(){return e.goToNextSlide(),!1}),$(".js-header-slider-prev").click(function(){return e.goToPrevSlide(),!1}),$(window).resize(function(){e.reloadSlider()})})}(),function(){function e(t,n,i){$(t.target).closest(n).length||(i(),$(document).off("click","body",e))}$(".js-offcanvas").click(function(){function t(){$(".js-offcanvas").addClass("active"),$(i).addClass("active"),$(document).on("click","body",function(t){e(t,o,n)})}function n(){$(".js-offcanvas, "+i).removeClass("active")}var i="#offcanvas",o="#offcanvas > .main-offcanvas";return $(this).hasClass("active")?n():t(),!1})}(),function(e){e.fn.toggler=function(){return this.each(function(){e(this).on("click",function(t){var n=e(this).data("toggle")||e(this).attr("href"),i=e(this).data("toggle-class")||"active",o=e(this).data("toggle-group"),r=e(this).is("[data-toggle-self-deactive]");return console.log(n,i,o),e('[data-toggle-group="'+o+'"]').not(this).each(function(){var t=e(this).data("toggle")||e(this).attr("href"),n=e(this).data("toggle-class")||"active";e(t).removeClass(n),e(this).removeClass(n)}),e(this).hasClass(i)&&r?(e(this).removeClass(i),e(n).removeClass(i)):(e(this).addClass(i),e(n).addClass(i)),!1})}),this}}(jQuery),$(document).ready(function(){$("body").append('<div id="verstka" style="position: fixed; top: 40%; right: 0; background: #fff; border: 1px solid #cecece; box-shadow: 2px 3px 10px #808080; padding: 15px; z-index: 999;"><span  id="close" style="cursor:pointer; border: 1px solid #cecece;">X</span> Страницы верстки:<br />1. √ <a href="index.php">Главная</a><br />2. √ <a href="projects.php">Все проекты</a><br />3. √ <a href="project.php">Проект</a><br />4. √ <a href="text.php">Текстовая</a><br />5. √ <a href="staff.php">Сотрудники Фонда</a><br />6. √ <a href="staff-member.php">Карточка сотрудника</a><br />7. √ <a href="news.php">События и новости</a><br />8. √ <a href="reports.php">Отчеты</a><br />9. <a href="directory.php">Справочник</a><br />10. √ <a href="fund.php">Разводная страница (каталог)</a><br />11. √ <a href="fund-video.php">Разводная страница (каталог)<br /> с видео</a><br />12. √ <a href="partners.php">Партнеры</a><br />13. √ <a href="contacts.php">Контакты</a><br /></div>'),$("#close").click(function(e){$("#verstka").hide(),e.preventDefault()})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
